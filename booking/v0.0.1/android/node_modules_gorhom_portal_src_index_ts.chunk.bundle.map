{"version":3,"file":"node_modules_gorhom_portal_src_index_ts.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/@gorhom/portal/src/components/portal/Portal.tsx","webpack:///./node_modules/@gorhom/portal/src/components/portalHost/PortalHost.tsx","webpack:///./node_modules/@gorhom/portal/src/components/portalProvider/PortalProvider.tsx","webpack:///./node_modules/@gorhom/portal/src/contexts/portal.ts","webpack:///./node_modules/@gorhom/portal/src/hooks/usePortal.ts","webpack:///./node_modules/@gorhom/portal/src/hooks/usePortalState.ts","webpack:///./node_modules/@gorhom/portal/src/index.ts","webpack:///./node_modules/@gorhom/portal/src/state/constants.ts","webpack:///./node_modules/@gorhom/portal/src/state/reducer.ts","webpack:///./node_modules/@gorhom/portal/src/utilities/logger.ts","webpack:///./node_modules/nanoid/non-secure/index.cjs"],"sourcesContent":["import { memo, useCallback, useEffect, useMemo, useRef } from 'react';\nimport { nanoid } from 'nanoid/non-secure';\nimport { usePortal } from '../../hooks/usePortal';\nimport type { PortalProps } from './types';\n\nconst PortalComponent = ({\n  name: _providedName,\n  hostName,\n  handleOnMount: _providedHandleOnMount,\n  handleOnUnmount: _providedHandleOnUnmount,\n  handleOnUpdate: _providedHandleOnUpdate,\n  children,\n}: PortalProps) => {\n  //#region hooks\n  const { addPortal: addUpdatePortal, removePortal } = usePortal(hostName);\n  //#endregion\n\n  //#region variables\n  const name = useMemo(() => _providedName || nanoid(), [_providedName]);\n  //#endregion\n\n  //#region refs\n  const handleOnMountRef = useRef<Function>();\n  const handleOnUnmountRef = useRef<Function>();\n  const handleOnUpdateRef = useRef<Function>();\n  //#endregion\n\n  //#region callbacks\n  const handleOnMount = useCallback(() => {\n    if (_providedHandleOnMount) {\n      _providedHandleOnMount(() => addUpdatePortal(name, children));\n    } else {\n      addUpdatePortal(name, children);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [_providedHandleOnMount, addUpdatePortal]);\n  handleOnMountRef.current = handleOnMount;\n\n  const handleOnUnmount = useCallback(() => {\n    if (_providedHandleOnUnmount) {\n      _providedHandleOnUnmount(() => removePortal(name));\n    } else {\n      removePortal(name);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [_providedHandleOnUnmount, removePortal]);\n  handleOnUnmountRef.current = handleOnUnmount;\n\n  const handleOnUpdate = useCallback(() => {\n    if (_providedHandleOnUpdate) {\n      _providedHandleOnUpdate(() => addUpdatePortal(name, children));\n    } else {\n      addUpdatePortal(name, children);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [_providedHandleOnUpdate, addUpdatePortal, children]);\n  handleOnUpdateRef.current = handleOnUpdate;\n  //#endregion\n\n  //#region effects\n  useEffect(() => {\n    handleOnMountRef.current?.();\n    return () => {\n      handleOnUnmountRef.current?.();\n\n      // remove callbacks refs\n      handleOnMountRef.current = undefined;\n      handleOnUnmountRef.current = undefined;\n      handleOnUpdateRef.current = undefined;\n    };\n  }, []);\n  useEffect(() => {\n    handleOnUpdateRef.current?.();\n  }, [children]);\n  //#endregion\n\n  return null;\n};\n\nexport const Portal = memo(PortalComponent);\nPortal.displayName = 'Portal';\n","import React, { memo, useEffect } from 'react';\nimport { usePortalState } from '../../hooks/usePortalState';\nimport { usePortal } from '../../hooks/usePortal';\nimport type { PortalHostProps } from './types';\n\nconst PortalHostComponent = ({ name }: PortalHostProps) => {\n  //#region hooks\n  const state = usePortalState(name);\n  const { registerHost, deregisterHost } = usePortal(name);\n  //#endregion\n\n  //#region effects\n  useEffect(() => {\n    registerHost();\n    return () => {\n      deregisterHost();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  //#endregion\n\n  //#region render\n  return <>{state.map(item => item.node)}</>;\n  //#endregion\n};\n\nexport const PortalHost = memo(PortalHostComponent);\nPortalHost.displayName = 'PortalHost';\n","import React, { memo, useReducer } from 'react';\nimport { PortalHost } from '../portalHost/PortalHost';\nimport {\n  PortalDispatchContext,\n  PortalStateContext,\n} from '../../contexts/portal';\nimport { INITIAL_STATE } from '../../state/constants';\nimport { reducer } from '../../state/reducer';\nimport type { PortalProviderProps } from './types';\n\nconst PortalProviderComponent = ({\n  rootHostName = 'root',\n  shouldAddRootHost = true,\n  children,\n}: PortalProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n  return (\n    <PortalDispatchContext.Provider value={dispatch}>\n      <PortalStateContext.Provider value={state}>\n        {children}\n        {shouldAddRootHost && <PortalHost name={rootHostName} />}\n      </PortalStateContext.Provider>\n    </PortalDispatchContext.Provider>\n  );\n};\n\nexport const PortalProvider = memo(PortalProviderComponent);\nPortalProvider.displayName = 'PortalProvider';\n","import { createContext } from 'react';\nimport type { ActionTypes } from '../state/types';\nimport type { PortalType } from '../types';\n\nexport const PortalStateContext = createContext<Record<\n  string,\n  Array<PortalType>\n> | null>(null);\nexport const PortalDispatchContext =\n  createContext<React.Dispatch<ActionTypes> | null>(null);\n","import { ReactNode, useCallback, useContext } from 'react';\nimport { ACTIONS } from '../state/constants';\nimport { PortalDispatchContext } from '../contexts/portal';\n\nexport const usePortal = (hostName: string = 'root') => {\n  const dispatch = useContext(PortalDispatchContext);\n\n  if (dispatch === null) {\n    throw new Error(\n      \"'PortalDispatchContext' cannot be null, please add 'PortalProvider' to the root component.\"\n    );\n  }\n\n  //#region methods\n  const registerHost = useCallback(() => {\n    dispatch({\n      type: ACTIONS.REGISTER_HOST,\n      hostName: hostName,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const deregisterHost = useCallback(() => {\n    dispatch({\n      type: ACTIONS.DEREGISTER_HOST,\n      hostName: hostName,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const addUpdatePortal = useCallback((name: string, node: ReactNode) => {\n    dispatch({\n      type: ACTIONS.ADD_UPDATE_PORTAL,\n      hostName,\n      portalName: name,\n      node,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const removePortal = useCallback((name: string) => {\n    dispatch({\n      type: ACTIONS.REMOVE_PORTAL,\n      hostName,\n      portalName: name,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  //#endregion\n\n  return {\n    registerHost,\n    deregisterHost,\n    addPortal: addUpdatePortal,\n    updatePortal: addUpdatePortal,\n    removePortal,\n  };\n};\n","import { useContext } from 'react';\nimport { PortalStateContext } from '../contexts/portal';\n\nexport const usePortalState = (hostName: string) => {\n  const state = useContext(PortalStateContext);\n\n  if (state === null) {\n    throw new Error(\n      \"'PortalStateContext' cannot be null, please add 'PortalProvider' to the root component.\"\n    );\n  }\n\n  return state[hostName] || [];\n};\n","export { Portal } from './components/portal/Portal';\nexport { PortalHost } from './components/portalHost/PortalHost';\nexport { PortalProvider } from './components/portalProvider/PortalProvider';\nexport { usePortal } from './hooks/usePortal';\nexport { enableLogging } from './utilities/logger';\n","enum ACTIONS {\n  REGISTER_HOST,\n  DEREGISTER_HOST,\n  ADD_UPDATE_PORTAL,\n  REMOVE_PORTAL,\n}\n\nconst INITIAL_STATE = {};\n\nexport { ACTIONS, INITIAL_STATE };\n","import { ACTIONS } from './constants';\nimport { print } from '../utilities/logger';\nimport type { PortalType } from '../types';\nimport type {\n  ActionTypes,\n  AddUpdatePortalAction,\n  RemovePortalAction,\n} from './types';\n\nconst registerHost = (\n  state: Record<string, Array<PortalType>>,\n  hostName: string\n) => {\n  if (!(hostName in state)) {\n    state[hostName] = [];\n  }\n  return state;\n};\n\nconst deregisterHost = (\n  state: Record<string, Array<PortalType>>,\n  hostName: string\n) => {\n  delete state[hostName];\n  return state;\n};\n\nconst addUpdatePortal = (\n  state: Record<string, Array<PortalType>>,\n  hostName: string,\n  portalName: string,\n  node: any\n) => {\n  if (!(hostName in state)) {\n    state = registerHost(state, hostName);\n  }\n\n  /**\n   * updated portal, if it was already added.\n   */\n  const index = state[hostName].findIndex(item => item.name === portalName);\n  if (index !== -1) {\n    state[hostName][index].node = node;\n  } else {\n    state[hostName].push({\n      name: portalName,\n      node,\n    });\n  }\n  return state;\n};\n\nconst removePortal = (\n  state: Record<string, Array<PortalType>>,\n  hostName: string,\n  portalName: string\n) => {\n  if (!(hostName in state)) {\n    print({\n      component: reducer.name,\n      method: removePortal.name,\n      params: `Failed to remove portal '${portalName}', '${hostName}' was not registered!`,\n    });\n    return state;\n  }\n\n  const index = state[hostName].findIndex(item => item.name === portalName);\n  if (index !== -1) state[hostName].splice(index, 1);\n  return state;\n};\n\nexport const reducer = (\n  state: Record<string, Array<PortalType>>,\n  action: ActionTypes\n) => {\n  const { type } = action;\n  let clonedState = { ...state };\n  switch (type) {\n    case ACTIONS.REGISTER_HOST:\n      return registerHost(clonedState, action.hostName);\n    case ACTIONS.DEREGISTER_HOST:\n      return deregisterHost(clonedState, action.hostName);\n    case ACTIONS.ADD_UPDATE_PORTAL:\n      return addUpdatePortal(\n        clonedState,\n        action.hostName,\n        (action as AddUpdatePortalAction).portalName,\n        (action as AddUpdatePortalAction).node\n      );\n    case ACTIONS.REMOVE_PORTAL:\n      return removePortal(\n        clonedState,\n        action.hostName,\n        (action as RemovePortalAction).portalName\n      );\n    default:\n      return state;\n  }\n};\n","interface PrintOptions {\n  component?: string;\n  method?: string;\n  params?: Record<string, any> | string | number | boolean;\n}\n\ntype Print = (options: PrintOptions) => void;\n\nlet isLoggingEnabled = false;\n\n// __DEV__ global is by default not defined in React Native Web builds\nconst isDev = Boolean(typeof __DEV__ !== 'undefined' && __DEV__);\n\nconst enableLogging = () => {\n  if (!isDev) {\n    console.warn('[Portal] could not enable logging on production!');\n    return;\n  }\n  isLoggingEnabled = true;\n};\n\nlet print: Print = () => {};\n\nif (isDev) {\n  print = ({ component, method, params }) => {\n    if (!isLoggingEnabled) {\n      return;\n    }\n    let message = '';\n\n    if (typeof params === 'object') {\n      message = Object.keys(params)\n        .map(key => `${key}:${params[key]}`)\n        .join(' ');\n    } else {\n      message = `${params ?? ''}`;\n    }\n    console.log(\n      `[Portal::${[component, method].filter(Boolean).join('::')}]`,\n      message\n    );\n  };\n}\n\nObject.freeze(print);\n\nexport { print, enableLogging };\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\nmodule.exports = { nanoid, customAlphabet }\n"],"names":["_react","require","_nonSecure","_usePortal2","exports","memo","_ref","_providedName","name","hostName","_providedHandleOnMount","handleOnMount","_providedHandleOnUnmount","handleOnUnmount","_providedHandleOnUpdate","handleOnUpdate","children","_usePortal","usePortal","addUpdatePortal","addPortal","removePortal","useMemo","nanoid","handleOnMountRef","useRef","handleOnUnmountRef","handleOnUpdateRef","useCallback","current","useEffect","undefined","displayName","e","r","__esModule","default","t","_getRequireWildcardCache","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","_usePortalState","_jsxRuntime","WeakMap","state","usePortalState","registerHost","deregisterHost","jsx","Fragment","map","item","node","_PortalHost","_portal","_constants","_reducer","_ref$rootHostName","rootHostName","_ref$shouldAddRootHos","shouldAddRootHost","_useReducer","useReducer","reducer","INITIAL_STATE","_useReducer2","_slicedToArray2","dispatch","PortalDispatchContext","Provider","value","jsxs","PortalStateContext","PortalHost","createContext","arguments","length","useContext","Error","type","ACTIONS","REGISTER_HOST","DEREGISTER_HOST","ADD_UPDATE_PORTAL","portalName","updatePortal","REMOVE_PORTAL","_Portal","_PortalProvider","_logger","print","component","method","params","index","findIndex","splice","action","clonedState","assign","push","isLoggingEnabled","isDev","Boolean","__DEV__","console","warn","message","keys","key","join","log","filter","freeze","module","size","id","Math","random","customAlphabet","alphabet","defaultSize"],"sourceRoot":""}