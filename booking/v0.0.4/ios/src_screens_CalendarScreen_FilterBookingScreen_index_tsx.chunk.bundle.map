{"version":3,"file":"src_screens_CalendarScreen_FilterBookingScreen_index_tsx.chunk.bundle","mappings":"+NAAA,IAAAA,EAAAC,EAAA,OACAC,EAAAD,EAAA,OAQAE,EAAAF,EAAA,OACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,OACAK,EAAAL,EAAA,OAAyDM,EAAAN,EAAA,OAgDnDO,GA5C0BC,EAAAA,qBAAG,EAAAC,EAAAA,OAAK,WACtC,IAAMC,GAAQ,EAAAC,EAAAA,aACC,EAAAC,EAAAA,gBAAe,CAC5BC,OAAQ,KAGV,OACE,EAAAP,EAAAQ,MAACb,EAAAc,kBAAiB,CAAAC,SAAA,EAChB,EAAAV,EAAAW,KAAChB,EAAAiB,cAAa,CACZC,MAAO,SACPC,eAAe,EAAAd,EAAAW,KAACf,EAAAmB,KAAI,IACpBC,gBAAgB,EAAAhB,EAAAW,KAACV,EAAS,CAACgB,QAASC,EAAAA,YAEtC,EAAAlB,EAAAW,KAACQ,EAAW,KAEZ,EAAAnB,EAAAW,KAACS,EAAa,CACZC,QAAS,CACP,CACER,MAAO,QACPS,gBAAiBlB,EAAMmB,MACvBC,MAAO,CACLC,YAAa,EACbC,YAAatB,EAAMuB,aACnBC,aAAc,GAEhBC,UAASC,OAAAC,OAAA,GACJC,EAAAA,YAAYC,cAEjBC,UAAW9B,EAAMuB,cAEnB,CACEd,MAAO,QACPS,gBAAiBlB,EAAMuB,aACvBE,UAASC,OAAAC,OAAA,GACJC,EAAAA,YAAYC,cAEjBC,UAAW9B,EAAMmB,YAM7B,KAEkB,EAAAY,EAAAA,QAAOC,EAAAA,UAAUC,OAAM,SAACC,GAAC,MAAM,CAC/CC,OAAQC,EAAAA,MAAMC,OAAOC,OACrBC,UAAW,GACXC,WAAY,CACVC,UAAWP,EAAElC,MAAM0C,UAEtB,GAAG;;GAIE3B,EAAcgB,EAAAA,OAAOY,UAAW;;EAIhC3B,GAAgB,EAAAe,EAAAA,QAAOa,EAAAA,eAAgB;;;kBAG3B,SAACV,GAAC,OAAKA,EAAElC,MAAMuB,YAAY","sources":["webpack:///./src/screens/CalendarScreen/FilterBookingScreen/index.tsx"],"sourcesContent":["import { memo } from \"react\";\nimport {\n  FullScreenWrapper,\n  DynamicHeader,\n  UIButton,\n  UIDateTimeInput,\n  UIBottomButton,\n  UITextStyle,\n} from \"@true/ui\";\nimport { View } from \"react-native\";\nimport { goBack, styled, useTheme } from \"@true/core\";\nimport { Icons } from \"@true/asset\";\nimport { useSharedValue } from \"react-native-reanimated\";\n\nexport interface FilterBookingScreenProps {}\n\nexport const FilterBookingScreen = memo(() => {\n  const theme = useTheme();\n  const params = useSharedValue({\n    status: \"\",\n  });\n\n  return (\n    <FullScreenWrapper>\n      <DynamicHeader\n        title={\"Filter\"}\n        leftComponent={<View />}\n        rightComponent={<SCloseBtn onPress={goBack} />}\n      />\n      <SScrollView></SScrollView>\n\n      <SBottomButton\n        buttons={[\n          {\n            title: \"Reset\",\n            backgroundColor: theme.white,\n            style: {\n              borderWidth: 1,\n              borderColor: theme.primaryColor,\n              borderRadius: 8,\n            },\n            textStyle: {\n              ...UITextStyle.button_large,\n            },\n            textColor: theme.primaryColor,\n          },\n          {\n            title: \"Apply\",\n            backgroundColor: theme.primaryColor,\n            textStyle: {\n              ...UITextStyle.button_large,\n            },\n            textColor: theme.white,\n          },\n        ]}\n      />\n    </FullScreenWrapper>\n  );\n});\n\nconst SCloseBtn = styled(UIButton).attrs((p) => ({\n  source: Icons.Filled.X_MARK,\n  imageSize: 24,\n  imageStyle: {\n    tintColor: p.theme.neutral1,\n  },\n}))`\n  padding-right: 16px;\n`;\n\nconst SScrollView = styled.ScrollView`\n  padding: 12px 16px;\n`;\n\nconst SBottomButton = styled(UIBottomButton)`\n  padding: 8px 16px;\n  border-top-width: 1px;\n  border-color: ${(p) => p.theme.primaryColor};\n`;\n"],"names":["_react","require","_ui","_reactNative","_core","_asset","_reactNativeReanimated","_jsxRuntime","SCloseBtn","exports","memo","theme","useTheme","useSharedValue","status","jsxs","FullScreenWrapper","children","jsx","DynamicHeader","title","leftComponent","View","rightComponent","onPress","goBack","SScrollView","SBottomButton","buttons","backgroundColor","white","style","borderWidth","borderColor","primaryColor","borderRadius","textStyle","Object","assign","UITextStyle","button_large","textColor","styled","UIButton","attrs","p","source","Icons","Filled","X_MARK","imageSize","imageStyle","tintColor","neutral1","ScrollView","UIBottomButton"],"sourceRoot":""}