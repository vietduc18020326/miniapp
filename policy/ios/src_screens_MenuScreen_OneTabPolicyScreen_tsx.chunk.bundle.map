{"version":3,"file":"src_screens_MenuScreen_OneTabPolicyScreen_tsx.chunk.bundle","mappings":"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","sources":["webpack:///./src/components/index.ts","webpack:///./src/screens/MenuScreen/OneTabPolicyScreen.tsx","webpack:///./src/screens/MenuScreen/PolicyList.tsx"],"sourcesContent":["export * from '@true/ui';\n\nexport * from './Button'\n","import {ScreenWrapper} from '@policy/components';\nimport React, {memo, useState} from 'react';\nimport {DynamicHeader} from '@true/ui';\nimport {Fonts, stripSpecialCharacters, styled, useNavigationParams} from '@true/core';\nimport {PolicyList} from '@policy/screens/MenuScreen/PolicyList';\nimport {navigateToDynamicFilterScreen} from '@policy/utils';\nimport {IInputFilterType} from '@policy/components/FilterComp';\nimport {FilterIcon} from '@policy/components/FilterIcon';\nimport {SelectedItemProvider} from '@policy/context/SelectedItemContext';\nimport {SelectedHeader} from '@policy/screens/HomeScreen/SelectedHeader';\nimport {useAnimatedSafeAreaInsets} from 'react-native-safe-area-context';\n\nexport interface OneTabPolicyScreenProps {\n  title: string;\n  params: any;\n  query: string;\n  requestFn: (params: any) => Promise<any>;\n  items: IInputFilterType[];\n  mainKey?: string;\n}\n\nexport const OneTabPolicyScreen = memo(() => {\n  const {\n    title,\n    params,\n    query,\n    requestFn,\n    items,\n    mainKey = 'id',\n  } = useNavigationParams<OneTabPolicyScreenProps>();\n\n  const [_params, setParams] = useState(params);\n\n  const {aTop} = useAnimatedSafeAreaInsets();\n\n  return (\n    <ScreenWrapper isGrey={true}>\n      <SelectedItemProvider>\n        <SViewContent>\n          <DynamicHeader\n            title={stripSpecialCharacters(title)}\n            hideSeparator={true}\n            rightComponent={\n              <SRow>\n                <FilterIcon\n                  onPress={() => {\n                    navigateToDynamicFilterScreen({\n                      params: _params,\n                      setParams,\n                      items,\n                      mainKey,\n                    });\n                  }}\n                  params={{..._params, [mainKey]: undefined}}\n                />\n              </SRow>\n            }\n          />\n          <SelectedHeader\n            title={stripSpecialCharacters(title)}\n            animatedTop={aTop}\n          />\n          <PolicyList\n            // ListHeaderComponent={\n            //   <STitleWrapper>\n            //     <STitle>{stripSpecialCharacters(title)}</STitle>\n            //   </STitleWrapper>\n            // }\n            params={_params}\n            query={query}\n            requestFn={requestFn}\n          />\n        </SViewContent>\n      </SelectedItemProvider>\n    </ScreenWrapper>\n  );\n});\n\nconst STitleWrapper = styled.View`\n  padding: 8px 16px 16px;\n  background-color: ${p => p.theme.backgroundColor};\n  border-bottom-width: 1px;\n  border-color: ${p => p.theme.grey4};\n`;\n\nconst SViewContent = styled.View`\n  background-color: ${p => p.theme.neutral9};\n  flex: 1;\n`;\n\nconst STitle = styled.Text`\n  font-size: 20px;\n  line-height: 28px;\n  font-family: ${Fonts.Bold};\n  color: ${p => p.theme.neutral1};\n`;\n\nconst SRow = styled.View`\n  flex-direction: row;\n  margin-right: 16px;\n`;\n","import React, { memo, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { UIFlashList } from \"@true/ui\";\nimport { useAsyncFn } from \"react-use\";\nimport { PoliciesItem } from \"@policy/screens/HomeScreen/PoliciesItem\";\nimport { getPoliciesByQuery } from \"@policy/store/policies\";\nimport { ActivityIndicator, Image, View } from \"react-native\";\nimport { IC_EMPTY_LIST, styled, translate, useAutoToastError } from \"@true/core\";\n\nexport const PolicyList = memo(\n  ({\n    params,\n    query,\n    requestFn,\n   ListHeaderComponent\n  }: {\n    params: any;\n    query: string;\n    requestFn: (params: any) => Promise<any>;\n    ListHeaderComponent?: JSX.Element;\n  }) => {\n    const [{loading: firstLoading, error: firstLoadError}, onFirstLoad] =\n      useAsyncFn(requestFn);\n    const [{loading: refreshing, error: refreshingError}, onRefresh] =\n      useAsyncFn(requestFn);\n    const [\n      {loading: paramChangeLoading, error: paramsChangeError},\n      onParamsChange,\n    ] = useAsyncFn(requestFn);\n\n    const renderItem = useCallback(({item, index}:{ item: number, index?: number\n  }) => {\n      return <PoliciesItem id={item} index={index} />;\n    }, []);\n\n    const [itemList, setItemList] = useState<(number | string)[]>([]);\n    const [mounted, setMounted] = useState(false);\n\n    const submitParams = useMemo(() => {\n      let result: any = {};\n\n      if (params) {\n        for (let key in params) {\n          if (params[key]) result[key] = params[key];\n        }\n      }\n\n      return result;\n    }, [params]);\n\n    useEffect(() => {\n      onFirstLoad(submitParams).then(() => {\n        setItemList(getPoliciesByQuery(query));\n        setMounted(true);\n      });\n    }, [query]);\n\n    useEffect(() => {\n      if (mounted)\n        onParamsChange(submitParams).then(() => {\n          setItemList(getPoliciesByQuery(query));\n        });\n    }, [query, submitParams]);\n\n    const onLoadData = useCallback(\n      (isRefreshing: boolean, isLoadMore: boolean) => {\n        if (isRefreshing) {\n          onRefresh(params).then(() => {\n            setItemList(getPoliciesByQuery(query));\n          });\n        }\n      },\n      [submitParams],\n    );\n\n    useAutoToastError(firstLoadError);\n    useAutoToastError(refreshingError);\n    useAutoToastError(paramsChangeError);\n\n    return mounted ? (\n      <UIFlashList\n        ListHeaderComponent={ListHeaderComponent}\n        data={itemList}\n        estimatedItemSize={150}\n        renderItem={renderItem}\n        loading={firstLoading}\n        refreshing={refreshing}\n        ListEmptyComponent={\n          <View\n            style={{\n              marginTop: 150,\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}>\n            <Image source={IC_EMPTY_LIST} />\n            <SText style={{paddingTop: 16}}>\n              {translate('policy.no_more_doc')}\n            </SText>\n          </View>\n        }\n        refreshable={true}\n        onLoadData={onLoadData}\n      />\n    ) : (\n      <ActivityIndicator style={{top: 50}} />\n    );\n  },\n);\n\nconst SDivider = styled.View`\n  height: 8px;\n  background-color: ${p => p.theme.grey4};\n`;\n\nconst SText = styled.Text`\n  color: ${p => p.theme.neutral1};\n`;\n"],"names":["_ui","require","Object","keys","forEach","key","exports","defineProperty","enumerable","get","_Button","_templateObject","_templateObject2","_templateObject3","_templateObject4","_components","_react","obj","nodeInterop","__esModule","default","cache","_getRequireWildcardCache","has","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","_core","_PolicyList","_utils","_FilterIcon","_SelectedItemContext","_SelectedHeader","_reactNativeSafeAreaContext","_jsxRuntime","WeakMap","cacheBabelInterop","cacheNodeInterop","OneTabPolicyScreen","memo","_useNavigationParams","useNavigationParams","title","params","query","requestFn","items","_useNavigationParams$","mainKey","_useState","useState","_useState2","_slicedToArray2","_params","setParams","aTop","useAnimatedSafeAreaInsets","jsx","ScreenWrapper","isGrey","children","SelectedItemProvider","jsxs","SViewContent","DynamicHeader","stripSpecialCharacters","hideSeparator","rightComponent","SRow","FilterIcon","onPress","navigateToDynamicFilterScreen","assign","_defineProperty2","undefined","SelectedHeader","animatedTop","PolicyList","styled","View","_taggedTemplateLiteralLoose2","p","theme","backgroundColor","grey4","neutral9","Text","Fonts","Bold","neutral1","_reactUse","_PoliciesItem","_policies","_reactNative","_ref","ListHeaderComponent","_useAsyncFn","useAsyncFn","_useAsyncFn2","_useAsyncFn2$","firstLoading","loading","firstLoadError","error","onFirstLoad","_useAsyncFn3","_useAsyncFn4","_useAsyncFn4$","refreshing","refreshingError","onRefresh","_useAsyncFn5","_useAsyncFn6","_useAsyncFn6$","paramsChangeError","onParamsChange","renderItem","useCallback","_ref2","item","index","PoliciesItem","id","itemList","setItemList","_useState3","_useState4","mounted","setMounted","submitParams","useMemo","result","useEffect","then","getPoliciesByQuery","onLoadData","isRefreshing","isLoadMore","useAutoToastError","UIFlashList","data","estimatedItemSize","ListEmptyComponent","style","marginTop","alignItems","justifyContent","Image","source","IC_EMPTY_LIST","SText","paddingTop","translate","refreshable","ActivityIndicator","top"],"sourceRoot":""}