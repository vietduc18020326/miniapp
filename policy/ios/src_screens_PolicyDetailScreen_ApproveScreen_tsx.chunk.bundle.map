{"version":3,"file":"src_screens_PolicyDetailScreen_ApproveScreen_tsx.chunk.bundle","mappings":"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","sources":["webpack:///./src/components/Button/BottomButton.tsx","webpack:///./src/components/index.ts","webpack:///./src/screens/PolicyDetailScreen/ApproveScreen.tsx"],"sourcesContent":["import {memo} from 'react';\nimport {styled, useTheme} from '@true/core';\nimport Animated, {useAnimatedStyle} from 'react-native-reanimated';\nimport {StyleSheet, ViewProps} from 'react-native';\nimport {useAnimatedSafeAreaInsets} from 'react-native-safe-area-context';\nimport {Button} from '@policy/components';\nimport {Fonts} from '@true/core';\nimport {flatStyles} from '@true/core';\nimport {ButtonProvider} from './context';\n\ninterface IButton {\n  title: string;\n  onPress?: () => void;\n  textColor?: string;\n  backgroundColor?: string;\n  loading?: boolean;\n}\n\nexport const BottomButton = memo(\n  ({\n    isDivider,\n    buttons,\n    ...rest\n  }: {\n    isDivider?: boolean;\n    buttons: IButton[];\n  } & ViewProps) => {\n    const {aBottom} = useAnimatedSafeAreaInsets();\n    const animatedStyles = useAnimatedStyle(() => ({\n      paddingBottom: aBottom.value + 16,\n    }));\n\n    const theme = useTheme();\n\n    return (\n      <ButtonProvider>\n        <SWrapButton isDivider={isDivider} style={[rest.style, animatedStyles]}>\n          {buttons.map((item, index) => (\n            <Button\n              title={item.title}\n              loading={item.loading}\n              onPress={item.onPress}\n              textStyle={flatStyles(styles.text, {\n                color: item.textColor || theme.grey1,\n              })}\n              style={flatStyles(styles.button, {\n                backgroundColor: item.backgroundColor || theme.grey5,\n                marginLeft: index === 0 ? 0 : 12,\n              })}\n            />\n          ))}\n        </SWrapButton>\n      </ButtonProvider>\n    );\n  },\n);\n\nconst styles = StyleSheet.create({\n  text: {\n    fontFamily: Fonts.Medium,\n  },\n  button: {\n    borderRadius: 4,\n    flex: 1,\n    paddingVertical: 12,\n    paddingHorizontal: 8,\n    alignItems: 'center',\n  },\n});\n\nconst SWrapButton = styled(Animated.View)<{isDivider?: boolean}>`\n  flex-direction: row;\n  border-top-width: ${p => (p.isDivider ? 1 : 0)}px;\n  border-color: ${p => p.theme.neutral5};\n  margin: 0 16px;\n`;\n","export * from '@true/ui';\n\nexport * from './Button'\n","import React, { memo, useRef, useState } from \"react\";\nimport {\n  AnimatedKeyboardAvoidingViewRef,\n  DynamicHeader,\n  MyKeyboardAvoidingView,\n  MyTextInput,\n  ScreenWrapper\n} from \"@true/ui\";\nimport { useAutoToastError, useNavigationParams } from \"@true/core\";\nimport { styled, translate, useTheme } from \"@true/core\";\nimport { BottomButton } from \"@policy/components/Button/BottomButton\";\nimport { useAsyncFn } from \"react-use\";\nimport { requestApprove } from \"@policy/store/policies/functions\";\nimport { StyleSheet } from \"react-native\";\nimport Animated from \"react-native-reanimated\";\nimport { Colors } from \"@true/core\";\nimport { goBack } from \"@true/core\";\n\nexport interface ApproveScreenProps {\n  id: string | number;\n  title: string;\n  status: 1 | -1;\n}\n\nexport const ApproveScreen = memo(() => {\n  const {title, status, id} = useNavigationParams<ApproveScreenProps>();\n\n  const [note, setNote] = useState('');\n\n  const [{loading: approveLoading, error}, onApprove] = useAsyncFn(async () => {\n    await requestApprove({\n      id,\n      status,\n      note,\n    });\n    goBack();\n  }, [id, status, note]);\n\n  useAutoToastError(error);\n\n  const keyboardRef = useRef<AnimatedKeyboardAvoidingViewRef | null>(null);\n\n  const theme = useTheme();\n\n  return (\n    <ScreenWrapper>\n      <MyKeyboardAvoidingView ref={keyboardRef}>\n        <DynamicHeader title={title} />\n        <Animated.ScrollView ref={keyboardRef.current?.scrollRef}>\n          <SInputWrapper>\n            <MyTextInput\n              value={note}\n              title={\n                translate('policy.note') +\n                ' (' +\n                translate('policy.not_required') +\n                ')'\n              }\n              keyName={''}\n              onTextChange={(_, value) => {\n                setNote(value);\n              }}\n            />\n          </SInputWrapper>\n        </Animated.ScrollView>\n        <BottomButton\n          buttons={[\n            {\n              title:\n                status == 1\n                  ? translate('policy.approve')\n                  : translate('policy.reject'),\n              onPress: onApprove,\n              textColor: Colors.white,\n              backgroundColor: status == 1 ? Colors.green1 : Colors.red1,\n              loading: approveLoading,\n            },\n          ]}\n        />\n      </MyKeyboardAvoidingView>\n    </ScreenWrapper>\n  );\n});\n\nconst SInputWrapper = styled.View`\n  margin: 16px 16px 16px 16px;\n`;\n\nconst styles = StyleSheet.create({\n  input: {},\n});\n"],"names":["_templateObject","_react","require","_core","_reactNativeReanimated","obj","nodeInterop","__esModule","default","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","_reactNative","_reactNativeSafeAreaContext","_","_context","_jsxRuntime","_excluded","WeakMap","cacheBabelInterop","cacheNodeInterop","_worklet_14194919852759_init_data","code","BottomButton","memo","_ref","anonymous","isDivider","buttons","rest","_objectWithoutProperties2","aBottom","useAnimatedSafeAreaInsets","animatedStyles","useAnimatedStyle","paddingBottom","value","__closure","__initData","__workletHash","theme","useTheme","jsx","ButtonProvider","children","SWrapButton","style","map","item","index","Button","title","loading","onPress","textStyle","flatStyles","styles","text","color","textColor","grey1","button","backgroundColor","grey5","marginLeft","exports","StyleSheet","create","fontFamily","Fonts","Medium","borderRadius","flex","paddingVertical","paddingHorizontal","alignItems","styled","Animated","View","_taggedTemplateLiteralLoose2","p","neutral5","_ui","keys","forEach","enumerable","_Button","_BottomButton","_reactUse","_functions","_interopRequireDefault","ApproveScreen","_keyboardRef$current","_useNavigationParams","useNavigationParams","status","id","_useState","useState","_useState2","_slicedToArray2","note","setNote","_useAsyncFn","useAsyncFn","_asyncToGenerator2","requestApprove","goBack","_useAsyncFn2","_useAsyncFn2$","approveLoading","error","onApprove","useAutoToastError","keyboardRef","useRef","ScreenWrapper","jsxs","MyKeyboardAvoidingView","ref","DynamicHeader","ScrollView","current","scrollRef","SInputWrapper","MyTextInput","translate","keyName","onTextChange","Colors","white","green1","red1","input"],"sourceRoot":""}