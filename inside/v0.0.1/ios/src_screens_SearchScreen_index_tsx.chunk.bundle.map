{"version":3,"file":"src_screens_SearchScreen_index_tsx.chunk.bundle","mappings":"kNAE8CA,EAAAC,EAAAC,EAAAC,E,4BAF9CC,EAE8C,SAAAC,EAAAC,GAAA,IAAAA,GAAAD,GAAAA,EAAAE,WAAA,OAAAF,EAAA,UAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,OAAAG,QAAAH,GAAA,IAAAI,EAAAC,EAAAJ,GAAA,GAAAG,GAAAA,EAAAE,IAAAN,GAAA,OAAAI,EAAAG,IAAAP,GAAA,IAAAQ,EAAA,GAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,QAAAC,KAAAb,EAAA,eAAAa,GAAAH,OAAAI,UAAAC,eAAAC,KAAAhB,EAAAa,GAAA,KAAAI,EAAAR,EAAAC,OAAAE,yBAAAZ,EAAAa,GAAA,KAAAI,IAAAA,EAAAV,KAAAU,EAAAC,KAAAR,OAAAC,eAAAH,EAAAK,EAAAI,GAAAT,EAAAK,GAAAb,EAAAa,EAAA,CAAAL,EAAAL,QAAAH,EAAAI,GAAAA,EAAAc,IAAAlB,EAAAQ,GAAA,OAAAA,CAAA,CAF9CW,CAAAC,EAAA,QACAC,EAAAD,EAAA,MACAE,EAAAF,EAAA,OAA8CG,EAAAH,EAAA,OAAAI,EAAA,oBAAAnB,EAAAJ,GAAA,sBAAAwB,QAAA,gBAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAAA,OAAApB,EAAA,SAAAJ,GAAA,OAAAA,EAAA0B,EAAAD,CAAA,GAAAzB,EAAA,CAKvB2B,EAAAA,YAAG,EAAAC,EAAAA,OACxB,SAAAC,GAA+D,IAA7DC,EAAMD,EAANC,OAAWC,GAAI,EAAAC,EAAA9B,SAAA2B,EAAAN,GACf,OAEE,EAAAD,EAAAW,MAACC,EAAQzB,OAAA0B,OAAA,GACHJ,EAAI,CACRK,MAAO,CACLC,MAAO,GACPC,OAAQ,GACRC,WAAY,SACZC,eAAgB,UAChBC,SAAA,EACF,EAAAnB,EAAAoB,KAACC,EAAO,CAACC,OAAQC,EAAAA,sBACjB,EAAAvB,EAAAoB,KAACI,EAAe,CAACC,OAAO,EAAAC,EAAAA,gBAAelB,QAG7C,IAhBK,IAmBDI,EAAWe,EAAAA,OAAOC,iBAAiBC,OAAM,SAAAC,GAAC,MAAK,CACnDC,QAAS,CACPC,IAAK,EACLC,OAAQ,EACRC,KAAM,EACNC,MAAO,GAEV,GAPgBR,CAOdvD,IAAAA,GAAA,EAAAgE,EAAAxD,SAAA,QAEGyC,EAAUM,EAAAA,OAAOU,MAAKhE,IAAAA,GAAA,EAAA+D,EAAAxD,SAAA,QAEtB4C,GAAkB,EAAAlB,EAAAA,OAAK,SAAAgC,GAA+B,IAA7Bb,EAAKa,EAALb,MAC7B,OAAKA,GAEH,EAAAzB,EAAAoB,KAACmB,EAAe,CAAApB,UACd,EAAAnB,EAAAoB,KAACoB,EAAU,CAAArB,SAAEM,MAHE,IAMrB,IAEMc,EAAkBZ,EAAAA,OAAOc,KAAInE,IAAAA,GAAA,EAAA8D,EAAAxD,SAAA,oMAW7B4D,EAAab,EAAAA,OAAOe,KAAInE,IAAAA,GAAA,EAAA6D,EAAAxD,SAAA,kEACnB+D,EAAAA,OAAOC,M,kHChC6BxE,EAAAC,EAAAC,EAAAC,E,0CA1B/CsE,EAAAhD,EAAA,OACArB,EAAAoB,EAAAC,EAAA,QACAC,EAAAD,EAAA,MAUAiD,EAAAjD,EAAA,OACAkD,EAAAnD,EAAAC,EAAA,QACAmD,EAAAnD,EAAA,OACAoD,EAAApD,EAAA,OACAqD,EAAArD,EAAA,OACAsD,EAAAC,EAAAvD,EAAA,QACAwD,EAAAD,EAAAvD,EAAA,QACAyD,EAAAzD,EAAA,OACA0D,EAAA1D,EAAA,OACA2D,EAAA3D,EAAA,OACA4D,EAAA5D,EAAA,OAEA6D,EAAA7D,EAAA,OACA8D,EAAA9D,EAAA,OACA+D,EAAA/D,EAAA,OAA+CG,EAAAH,EAAA,gBAAAf,EAAAJ,GAAA,sBAAAwB,QAAA,gBAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAAA,OAAApB,EAAA,SAAAJ,GAAA,OAAAA,EAAA0B,EAAAD,CAAA,GAAAzB,EAAA,UAAAkB,EAAAnB,EAAAC,GAAA,IAAAA,GAAAD,GAAAA,EAAAE,WAAA,OAAAF,EAAA,UAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,OAAAG,QAAAH,GAAA,IAAAI,EAAAC,EAAAJ,GAAA,GAAAG,GAAAA,EAAAE,IAAAN,GAAA,OAAAI,EAAAG,IAAAP,GAAA,IAAAQ,EAAA,GAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,QAAAC,KAAAb,EAAA,eAAAa,GAAAH,OAAAI,UAAAC,eAAAC,KAAAhB,EAAAa,GAAA,KAAAI,EAAAR,EAAAC,OAAAE,yBAAAZ,EAAAa,GAAA,KAAAI,IAAAA,EAAAV,KAAAU,EAAAC,KAAAR,OAAAC,eAAAH,EAAAK,EAAAI,GAAAT,EAAAK,GAAAb,EAAAa,EAAA,QAAAL,EAAAL,QAAAH,EAAAI,GAAAA,EAAAc,IAAAlB,EAAAQ,GAAAA,CAAA,KAAA4E,EAAA,CAAAC,KAAA,mFAgJzCC,GA3ImB1D,EAAAA,cAAG,EAAAC,EAAAA,OAAK,WAC/B,IAE2C0D,EAQFzD,EAOT+B,EAQJ2B,EAzBrBC,GAAY,EAAAC,EAAAA,uBAAZD,SACAE,GAAQ,EAAAC,EAAAA,6BAARD,KACDE,GAAqB,EAAAC,EAAAA,oBAAgBP,EAAC,iBAAO,CACjDQ,WAAYJ,EAAKK,MAClB,GAACC,UAAA,CAAAN,KAnCUA,GAAIJ,EAAAW,WAAAd,EAAAG,EAAAY,cAAA,cAAAZ,IAoCVa,GAAmB,EAAAC,EAAAA,mBAAkB,UAC3CC,GAA4B,EAAAC,EAAAA,UAAwB,CAAC,GAAEC,GAAA,EAAAC,EAAAtG,SAAAmG,EAAA,GAAhDvE,EAAMyE,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAgC,EAAAJ,EAAAA,WAAS,GAAMK,GAAA,EAAAH,EAAAtG,SAAAwG,EAAA,GAAxCE,EAASD,EAAA,GAAEE,EAAUF,EAAA,GAC5BG,GAA0B,EAAAR,EAAAA,UAAS,IAAGS,GAAA,EAAAP,EAAAtG,SAAA4G,EAAA,GAA/Bf,EAAKgB,EAAA,GAAEC,EAAQD,EAAA,GAEtBE,GAA+B,EAAAC,EAAAA,aAAUrF,GAAA,EAAAsF,EAAAjH,UAAC,UAAOkH,GAC/C,IAAMC,EAAe,CACnBC,EAAGF,EAAOE,SAEN,EAAAC,EAAAA,sBAAqBF,EAC7B,IAAC,SAAAG,GAAA,OAAA3F,EAAA4F,MAAA,KAAAC,UAAA,GAAE,IAAGC,GAAA,EAAAnB,EAAAtG,SAAA+G,EAAA,GALEW,EAAOD,EAAA,GAAPC,QAAUC,EAASF,EAAA,GAOrBG,GAAe,EAAAC,EAAAA,cAAWnE,GAAA,EAAAuD,EAAAjH,UAC9B,UAAOoH,SACCO,EAASpH,OAAA0B,OAAC,CAAC,EAAGL,EAAO,CAACwF,EAAAA,KAC5BT,GAAW,GACXG,EAASM,EACX,IAAC,SAAAU,GAAA,OAAApE,EAAA6D,MAAA,KAAAC,UAAA,GACD,CAACG,EAAW/F,IAERmG,GAAW,EAAAF,EAAAA,cAAWxC,GAAA,EAAA4B,EAAAjH,UAC1B,UAAOkH,GACLP,GAAW,GAEXA,GAAW,GACXJ,EAAUW,EACZ,IAAC,SAAAc,GAAA,OAAA3C,EAAAkC,MAAA,KAAAC,UAAA,GACD,CAACG,EAAW9B,IAGRoC,GAAa,EAAAJ,EAAAA,cACjB,SAACK,EAAYC,GAAc,OACzB,EAAA/G,EAAAoB,KAACoC,EAAAwD,cAAa,CAACC,UAAU,EAAMH,GAAIA,GAASC,EAAS,GAEvD,IASF,OANA,EAAAG,EAAAA,YAAU,WACRX,EAAU,CACRP,EAAG,KACFmB,MACL,GAAG,CAACZ,KAGF,EAAAvG,EAAAW,MAACkC,EAAAuE,cAAa,CAAAjG,SAAA,EACZ,EAAAnB,EAAAW,MAACoD,EAAO,CAACjD,MAAOwD,EAAmBnD,SAAA,EACjC,EAAAnB,EAAAoB,KAACiG,EAAW,CAAAlG,UACV,EAAAnB,EAAAoB,KAAC4B,EAAAsE,YAAW,CACVhC,UAAWA,EACXC,WAAYA,EACZgC,mBAAoBf,MAGvBtC,GACC,EAAAlE,EAAAoB,KAACsC,EAAA8D,WAAU,CACThH,OAAQA,EACRiH,QAAS,YACP,EAAAC,EAAAA,wBAAuB,CACrBlH,OAAAA,EACA2E,UAAWwB,GAEf,IAEA,MACJ,EAAA3G,EAAAoB,KAACuG,EAAY,CAACF,QAASG,EAAAA,OAAOzG,UAC5B,EAAAnB,EAAAoB,KAACyG,EAAW,CAAA1G,SAAC,iBAGjB,EAAAnB,EAAAW,MAAC2C,EAAAb,KAAI,CACH3B,MAAO,CACLgH,KAAM,EACNC,gBAAiBpF,EAAAA,OAAOqF,UACxB7G,SAAA,EACAmE,IAAcgB,IACd,EAAAtG,EAAAoB,KAACyB,EAAAoF,YAAW,CACVC,KAAMrD,EACNsD,WAAY,IACZtB,WAAYA,EACZuB,8BAA8B,EAC9BC,sBAAuB,CACrBnH,eAAgB,SAChB4G,KAAM,GAERxB,SAAS,EACTgC,cAAc,EACdC,YAAY,EACZC,OAAO,EACPC,aAAa,EACbC,aAAa,EACbC,qBAAqB,EAAA3I,EAAAoB,KAACkC,EAAAb,KAAI,CAAC3B,MAAO,CAACC,MAAO,OAAQC,OAAQ,MAE1D4H,gBAAiB,kBACf,EAAA5I,EAAAoB,KAACqC,EAAAoF,gBAAe,CACdC,MAAOC,EAAAA,mBACPC,MAAO,8BACP,KAIN1D,GAAagB,KACb,EAAAtG,EAAAoB,KAAApB,EAAAiJ,SAAA,CAAA9H,SACG+H,MAAM/C,MAAM,KAAM+C,MAAM,IAAIC,KAAI,SAACC,EAAMrC,GAAK,OAC3C,EAAA/G,EAAAoB,KAAC+B,EAAAvE,QAAmB,CAAayK,aAAc,EAAElI,UAC/C,EAAAnB,EAAAW,MAACwC,EAAAvE,QAAoB0K,KAAI,CACvBC,QAAS,EACTC,cAAc,MACdvI,WAAW,SAAQE,SAAA,EACnB,EAAAnB,EAAAoB,KAAC+B,EAAAvE,QAAoB0K,KAAI,CACvBvI,MAAO,GACPC,OAAQ,GACRqI,aAAc,KAEhB,EAAArJ,EAAAW,MAACwC,EAAAvE,QAAoB0K,KAAI,CAACG,WAAY,EAAEtI,SAAA,EACtC,EAAAnB,EAAAoB,KAAC+B,EAAAvE,QAAoB0K,KAAI,CACvBvI,MAA8B,GAAvB2I,EAAAA,QAAQC,OAAO5I,MACtBC,OAAQ,MAEV,EAAAhB,EAAAoB,KAAC+B,EAAAvE,QAAoB0K,KAAI,CACvBvI,MAA8B,GAAvB2I,EAAAA,QAAQC,OAAO5I,MACtBC,OAAQ,GACR4I,UAAW,WAlBO7C,EAsBJ,WAOpC,KAEgB,EAAApF,EAAAA,QAAOkI,EAAAA,QAASpH,KAAhB,CAAqBrE,IAAAA,GAAA,EAAAgE,EAAAxD,SAAA,uKAKR,SAAAkD,GAAC,OAAIA,EAAEgI,MAAMC,QAAQ,KAG5C1C,EAAc1F,EAAAA,OAAOc,KAAIpE,IAAAA,GAAA,EAAA+D,EAAAxD,SAAA,mEAMzB+I,EAAehG,EAAAA,OAAOC,iBAAgBtD,IAAAA,GAAA,EAAA8D,EAAAxD,SAAA,4HAOtCiJ,EAAclG,EAAAA,OAAOe,KAAInE,IAAAA,GAAA,EAAA6D,EAAAxD,SAAA,mJACpB,SAAAkD,GAAC,OAAIA,EAAEgI,MAAME,QAAQ,GAEfC,EAAAA,MAAMC,Q,+FClMI7J,EAAAA,eAAG,SAACG,GAE7B,IAAIiB,EAAQ,EACZ,IAAK,IAAInC,KAAOkB,EACF,MAARlB,GAAekB,EAAOlB,IAAMmC,IAElC,OAAOA,CACT,C","sources":["webpack:///./src/components/FilterIcon/index.tsx","webpack:///./src/screens/SearchScreen/index.tsx","webpack:///./src/utils/filter.ts"],"sourcesContent":["import React, {memo} from 'react';\nimport {IC_OUTLINED_FILTER} from '@true/core';\nimport {getCountFilter} from '@/utils/filter';\nimport {styled} from '@true/core';\nimport {Colors} from '@true/core';\nimport {TouchableOpacityProps} from 'react-native';\n\nexport const FilterIcon = memo(\n  ({params, ...rest}: {params: any} & TouchableOpacityProps) => {\n    return (\n      // @ts-ignore\n      <SBackBtn\n        {...rest}\n        style={{\n          width: 48,\n          height: 48,\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}>\n        <SBackIc source={IC_OUTLINED_FILTER} />\n        <CountFilterView count={getCountFilter(params)} />\n      </SBackBtn>\n    );\n  },\n);\n\nconst SBackBtn = styled.TouchableOpacity.attrs(p => ({\n  hitSlop: {\n    top: 8,\n    bottom: 8,\n    left: 8,\n    right: 8,\n  },\n}))``;\n\nconst SBackIc = styled.Image``;\n\nconst CountFilterView = memo(({count}: {count: number}) => {\n  if (!count) return null;\n  return (\n    <SCountContainer>\n      <SCountText>{count}</SCountText>\n    </SCountContainer>\n  );\n});\n\nconst SCountContainer = styled.View`\n  position: absolute;\n  border-radius: 10px;\n  width: 16px;\n  height: 16px;\n  align-items: center;\n  justify-content: center;\n  background-color: red;\n  top: 5px;\n  right: 5px;\n`;\nconst SCountText = styled.Text`\n  color: ${Colors.white};\n  font-size: 10px;\n  line-height: 16px;\n`;\n","import {RecycleList, ScreenWrapper} from '@true/ui';\nimport React, {memo, useCallback, useEffect, useState} from 'react';\nimport {\n  Colors,\n  Fonts,\n  goBack,\n  styled,\n  useNavigationParams,\n  useTheme,\n} from '@true/core';\nimport {IC_OUTLINED_BACKWARD} from '@true/asset';\n\nimport {useAnimatedSafeAreaInsets} from 'react-native-safe-area-context';\nimport Animated, {useAnimatedStyle} from 'react-native-reanimated';\nimport {MySearchBar} from '@/screens/SearchScreen/SearchBar';\nimport {requestSearchUpdates} from '@/store/updates/function';\nimport {useAsyncFn} from '@/hooks/useAsyncFn';\nimport SkeletonPlaceholder from 'react-native-skeleton-placeholder';\nimport Metrics from '@/assets/Metrics';\nimport {View} from 'react-native';\nimport {useUpdatesByQuery} from '@/store/updates';\nimport {PostThumbnail} from '@/components/PostThumbnail';\nimport {EmptySearchView} from '@/components/EmptyView';\nimport {IFilterParams} from '@/screens/SearchScreen/type';\nimport {FilterIcon} from '@/components/FilterIcon';\nimport {navigateToFilterScreen} from '@/utils';\nimport {IMAGE_EMPTY_SEARCH} from '@true/asset';\n\nexport interface SearchScreenParams {\n  isFilter: boolean;\n}\nexport const SearchScreen = memo(function () {\n  const {isFilter} = useNavigationParams<SearchScreenParams>();\n  const {aTop} = useAnimatedSafeAreaInsets();\n  const animatedPaddingTop = useAnimatedStyle(() => ({\n    paddingTop: aTop.value,\n  }));\n  const searchUpdatesIds = useUpdatesByQuery('search');\n  const [params, setParams] = useState<IFilterParams>({});\n  const [isTexting, setTexting] = useState(false);\n  const [value, setValue] = useState('');\n\n  const [{loading}, onRequest] = useAsyncFn(async (_value: any) => {\n    const _params: any = {\n      q: _value.q,\n    };\n    await requestSearchUpdates(_params);\n  }, []);\n\n  const onChangeText = useCallback(\n    async (q: string) => {\n      await onRequest({...params, q});\n      setTexting(false);\n      setValue(q);\n    },\n    [onRequest, params],\n  );\n  const onFilter = useCallback(\n    async (_value: any) => {\n      setTexting(true);\n      // await onRequest({..._value, q: value});\n      setTexting(false);\n      setParams(_value);\n    },\n    [onRequest, value],\n  );\n\n  const renderItem = useCallback(\n    (id: number, index?: number) => (\n      <PostThumbnail isInFeed={true} id={id} key={index} />\n    ),\n    [],\n  );\n\n  useEffect(() => {\n    onRequest({\n      q: '',\n    }).then();\n  }, [onRequest]);\n\n  return (\n    <ScreenWrapper>\n      <SHeader style={animatedPaddingTop}>\n        <SSearchView>\n          <MySearchBar\n            isTexting={isTexting}\n            setTexting={setTexting}\n            onSearchTextChange={onChangeText}\n          />\n        </SSearchView>\n        {isFilter ? (\n          <FilterIcon\n            params={params}\n            onPress={() => {\n              navigateToFilterScreen({\n                params,\n                setParams: onFilter,\n              });\n            }}\n          />\n        ) : null}\n        <CancelButton onPress={goBack}>\n          <SCancelText>Cancel</SCancelText>\n        </CancelButton>\n      </SHeader>\n      <View\n        style={{\n          flex: 1,\n          backgroundColor: Colors.neutral6,\n        }}>\n        {!isTexting && !loading && (\n          <RecycleList\n            data={searchUpdatesIds}\n            itemHeight={100}\n            renderItem={renderItem}\n            showsVerticalScrollIndicator={false}\n            contentContainerStyle={{\n              justifyContent: 'center',\n              flex: 1,\n            }}\n            loading={false}\n            isRefreshing={false}\n            isLoadMore={false}\n            error={false}\n            refreshable={false}\n            loadMorable={false}\n            ListHeaderComponent={<View style={{width: '100%', height: 16}} />}\n            // ListFooterComponent={<STextGrey>End of result</STextGrey>}\n            renderEmptyView={() => (\n              <EmptySearchView\n                image={IMAGE_EMPTY_SEARCH}\n                title={'Empty updates in this type'}\n              />\n            )}\n          />\n        )}\n        {(isTexting || loading) && (\n          <>\n            {Array.apply(null, Array(6)).map((item, index) => (\n              <SkeletonPlaceholder key={index} borderRadius={4}>\n                <SkeletonPlaceholder.Item\n                  padding={6}\n                  flexDirection=\"row\"\n                  alignItems=\"center\">\n                  <SkeletonPlaceholder.Item\n                    width={40}\n                    height={40}\n                    borderRadius={7}\n                  />\n                  <SkeletonPlaceholder.Item marginLeft={8}>\n                    <SkeletonPlaceholder.Item\n                      width={Metrics.screen.width * 0.7}\n                      height={20}\n                    />\n                    <SkeletonPlaceholder.Item\n                      width={Metrics.screen.width * 0.4}\n                      height={20}\n                      marginTop={4}\n                    />\n                  </SkeletonPlaceholder.Item>\n                </SkeletonPlaceholder.Item>\n              </SkeletonPlaceholder>\n            ))}\n          </>\n        )}\n      </View>\n    </ScreenWrapper>\n  );\n});\n\nconst SHeader = styled(Animated.View)`\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: -8px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid ${p => p.theme.neutral4};\n  background-color: white;\n`;\nconst SSearchView = styled.View`\n  flex: 1;\n  padding: 8px 16px;\n  border-radius: 8px;\n`;\n\nconst CancelButton = styled.TouchableOpacity`\n  display: flex;\n  padding: 4px 0px;\n  justify-content: center;\n  align-items: center;\n  margin-right: 12px;\n`;\nconst SCancelText = styled.Text`\n  color: ${p => p.theme.neutral2};\n  text-align: center;\n  font-family: ${Fonts.Regular};\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 24px; /* 171.429% */\n`;\n","export const getCountFilter = (params: {[id: string]: any}) => {\n  // const arr = Object.\n  let count = 0;\n  for (let key in params) {\n    if (key !== 'q' && params[key]) count++;\n  }\n  return count;\n};\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_react","obj","nodeInterop","__esModule","default","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","require","_core","_filter","_jsxRuntime","_excluded","WeakMap","cacheBabelInterop","cacheNodeInterop","exports","memo","_ref","params","rest","_objectWithoutProperties2","jsxs","SBackBtn","assign","style","width","height","alignItems","justifyContent","children","jsx","SBackIc","source","IC_OUTLINED_FILTER","CountFilterView","count","getCountFilter","styled","TouchableOpacity","attrs","p","hitSlop","top","bottom","left","right","_taggedTemplateLiteralLoose2","Image","_ref2","SCountContainer","SCountText","View","Text","Colors","white","_ui","_reactNativeSafeAreaContext","_reactNativeReanimated","_SearchBar","_function","_useAsyncFn3","_reactNativeSkeletonPlaceholder","_interopRequireDefault","_Metrics","_reactNative","_updates","_PostThumbnail","_EmptyView","_FilterIcon","_utils","_asset","_worklet_9978501313055_init_data","code","SHeader","anonymous","_ref3","isFilter","useNavigationParams","aTop","useAnimatedSafeAreaInsets","animatedPaddingTop","useAnimatedStyle","paddingTop","value","__closure","__initData","__workletHash","searchUpdatesIds","useUpdatesByQuery","_useState","useState","_useState2","_slicedToArray2","setParams","_useState3","_useState4","isTexting","setTexting","_useState5","_useState6","setValue","_useAsyncFn","useAsyncFn","_asyncToGenerator2","_value","_params","q","requestSearchUpdates","_x","apply","arguments","_useAsyncFn2","loading","onRequest","onChangeText","useCallback","_x2","onFilter","_x3","renderItem","id","index","PostThumbnail","isInFeed","useEffect","then","ScreenWrapper","SSearchView","MySearchBar","onSearchTextChange","FilterIcon","onPress","navigateToFilterScreen","CancelButton","goBack","SCancelText","flex","backgroundColor","neutral6","RecycleList","data","itemHeight","showsVerticalScrollIndicator","contentContainerStyle","isRefreshing","isLoadMore","error","refreshable","loadMorable","ListHeaderComponent","renderEmptyView","EmptySearchView","image","IMAGE_EMPTY_SEARCH","title","Fragment","Array","map","item","borderRadius","Item","padding","flexDirection","marginLeft","Metrics","screen","marginTop","Animated","theme","neutral4","neutral2","Fonts","Regular"],"sourceRoot":""}