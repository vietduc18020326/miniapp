{"version":3,"file":"src_screens_UpdateTypesScreen_FilteredTypeScreen_tsx.chunk.bundle","mappings":"4OAwBiBA,E,0CAxBjBC,EAwBiB,SAAAC,EAAAC,GAAA,IAAAA,GAAAD,GAAAA,EAAAE,WAAA,OAAAF,EAAA,UAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,OAAAG,QAAAH,GAAA,IAAAI,EAAAC,EAAAJ,GAAA,GAAAG,GAAAA,EAAAE,IAAAN,GAAA,OAAAI,EAAAG,IAAAP,GAAA,IAAAQ,EAAA,GAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,QAAAC,KAAAb,EAAA,eAAAa,GAAAH,OAAAI,UAAAC,eAAAC,KAAAhB,EAAAa,GAAA,KAAAI,EAAAR,EAAAC,OAAAE,yBAAAZ,EAAAa,GAAA,KAAAI,IAAAA,EAAAV,KAAAU,EAAAC,KAAAR,OAAAC,eAAAH,EAAAK,EAAAI,GAAAT,EAAAK,GAAAb,EAAAa,EAAA,CAAAL,EAAAL,QAAAH,EAAAI,GAAAA,EAAAc,IAAAlB,EAAAQ,GAAA,OAAAA,CAAA,CAxBjBW,CAAAC,EAAA,QACAC,EAAAD,EAAA,OACAE,EAAAF,EAAA,MACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,OACAK,EAAAL,EAAA,OACAM,EAAAN,EAAA,OACAO,EAAAP,EAAA,OACAQ,EAAAR,EAAA,OACAS,EAAAT,EAAA,OAIAU,EAAAV,EAAA,OACAW,EAAAX,EAAA,OACAY,EAAAZ,EAAA,OACAa,EAAAb,EAAA,OACAc,EAAAd,EAAA,OAOiBe,EAAAf,EAAA,gBAAAf,EAAAJ,GAAA,sBAAAmC,QAAA,gBAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAAA,OAAA/B,EAAA,SAAAJ,GAAA,OAAAA,EAAAqC,EAAAD,CAAA,GAAApC,EAAA,CAMcsC,EAAAA,oBAAG,EAAAC,EAAAA,OAAK,WACrC,IA2D8BC,EA3DvBC,GAAQ,EAAAC,EAAAA,uBAARD,KACDE,GAAsB,EAAAC,EAAAA,mBAAkBH,GACxCI,GAAS,EAAAC,EAAAA,kBAETC,GAAW,EAAAC,EAAAA,cAAY,WAC3B,OAAQP,GACN,KAAKQ,EAAAA,YAAYC,OACjB,KAAKD,EAAAA,YAAYE,OACjB,KAAKF,EAAAA,YAAYG,QACjB,KAAKH,EAAAA,YAAYI,KACjB,KAAKJ,EAAAA,YAAYK,aACf,OAAO,EAAAC,EAAAA,4BAA2B,CAChCd,KAAMA,IAEV,KAAKQ,EAAAA,YAAYO,MACf,OAAO,EAAAC,EAAAA,uBAAsB,CAC3BC,IAAK,IAET,KAAKT,EAAAA,YAAYU,KACf,OAAO,EAAAC,EAAAA,4BAA2B,CAChCF,IAAK,IAET,KAAKT,EAAAA,YAAYY,MACf,OAAO,EAAAC,EAAAA,6BAA4B,CACjCJ,IAAK,IAET,KAAKT,EAAAA,YAAYc,eACf,OAAO,EAAAC,EAAAA,8BAA6B,CAClCN,IAAK,IAET,KAAKT,EAAAA,YAAYgB,WACf,OAAO,EAAAC,EAAAA,iCAAgC,CACrCR,IAAK,IAET,QACE,OAAO,KAEb,GAAG,IACGS,GAAa,EAAAnB,EAAAA,cAAY,SAAAoB,GAAkB,IAAhBC,EAAID,EAAJC,KAC/B,OAAO,EAAAnC,EAAAoC,KAAC5C,EAAA6C,cAAa,CAACC,UAAU,EAAMd,GAAIW,GAC5C,GAAG,IACHI,GAAiC,EAAAC,EAAAA,aAAU,EAAAC,EAAAzE,UAAC,kBACpC,EAAA0E,EAAAA,oBAAmB,CAACC,MAAOC,EAAAA,aAAa5B,QAEhD,IAAG,IAAG6B,GAAA,EAAAC,EAAA9E,SAAAuE,EAAA,GAHEQ,EAAOF,EAAA,GAAPE,QAAUC,EAAWH,EAAA,GAK7BI,GACE,EAAAT,EAAAA,aAAU,EAAAC,EAAAzE,UAAC,YAGT,aAFM,EAAAkF,EAAAA,wBAAuB,CAACvC,OAAAA,UACxB,EAAAwC,EAAAA,OAAM,IACL,EACT,IAAG,CAAC1C,EAAoB2C,OAAQzC,IAAQ0C,GAAA,EAAAP,EAAA9E,SAAAiF,EAAA,GAAAK,EAAAD,EAAA,GALzBE,EAAWD,EAApBP,QAA6BS,EAASF,EAAhBG,MAAmBC,EAAeL,EAAA,GAO1DM,GAAe,EAAA7C,EAAAA,cAAY,WAC3ByC,GAGJG,IAAkBE,MACpB,GAAG,CAACL,EAAaC,EAAW/C,IACtBoD,GAAa,EAAA/C,EAAAA,cAAWR,GAAA,EAAAmC,EAAAzE,UAC5B,UAAO8F,EAAuBC,GACxBA,UACIL,IAEV,IAAC,SAAAM,EAAAC,GAAA,OAAA3D,EAAA4D,MAAA,KAAAC,UAAA,GACD,CAACT,IAGH,OACE,EAAA1D,EAAAoE,MAAClF,EAAAmF,cAAa,CAACC,QAAM,EAAAC,SAAA,EACnB,EAAAvE,EAAAoC,KAAC/C,EAAAmF,aAAY,CACXC,MAAOC,EAAAA,YAAYnE,GAAMkE,MACzBE,UAAU,EACV9D,SAAUA,EACV+D,QAAM,EACNC,WAAS,KAEX,EAAA7E,EAAAoC,KAAC0C,EAAK,CAACC,MAAOC,EAAAA,aAAaC,IAAIV,SAC5BxB,GACC,EAAA/C,EAAAoC,KAAC3C,EAAAyF,eAAc,KAEf,EAAAlF,EAAAoC,KAAClD,EAAAiG,YAAW,CACVC,KAAM3E,EACNwB,WAAYA,EACZoD,WAAYtC,EACZuC,UAAWtC,EACXuC,sBAAuB,EACvBC,oBAAoB,EAAAxF,EAAAoC,KAACvC,EAAA4F,UAAS,IAG9BC,uBAAuB,EACvB/B,aAAcA,EACdE,WAAYA,EACZ8B,YAAapC,EACbqC,aAAW,QAMvB,IArGO,IAsGDd,EAAQe,EAAAA,OAAOC,KAAInI,IAAAA,GAAA,EAAAoI,EAAA/H,SAAA,qB,8FCpIzB,IAAAgI,EAAA/G,EAAA,OAQAc,EAAAd,EAAA,OACAE,EAAAF,EAAA,MAEyGmB,EAAAA,YAAG,CAC1G6F,OAAO,CACLxB,MAAO,SACPyB,SAAS,sEACTC,KAAMC,EAAAA,gBACNC,QAASC,EAAAA,uBAEXC,aAAa,CACX9B,MAAO,gBACPyB,SAAS,mEACTC,KAAMK,EAAAA,uBACNH,QAAQI,EAAAA,8BAEVC,OAAO,CACLjC,MAAO,yBACPyB,SAAS,6DACTC,KAAMQ,EAAAA,gBACNN,QAAS,YACP,EAAAO,EAAAA,8BAA6B,CAC3BrG,KAAMQ,EAAAA,YAAYC,QAEtB,GAEF6F,KAAK,CACHpC,MAAO,QACPyB,SAAS,mFACTC,KAAMW,EAAAA,eACNT,QAAS,YACP,EAAAO,EAAAA,8BAA6B,CAC3BrG,KAAMQ,EAAAA,YAAYI,MAEtB,GACF4F,OAAO,CACLtC,MAAO,SACPyB,SAAS,mFACTC,KAAMa,EAAAA,gBACNX,QAAS,YACP,EAAAO,EAAAA,8BAA6B,CAC3BrG,KAAMQ,EAAAA,YAAYY,OAEtB,GACFsF,MAAM,CACJxC,MAAO,QACPyB,SAAS,0CACTC,KAAMe,EAAAA,oBACNb,QAAS,YACP,EAAAO,EAAAA,8BAA6B,CAC3BrG,KAAMQ,EAAAA,YAAYU,MAEtB,GACF0F,QAAQ,CACN1C,MAAO,WACPyB,SAAS,wBACTC,KAAMiB,EAAAA,kBACNf,QAAS,YACP,EAAAO,EAAAA,8BAA6B,CAC3BrG,KAAMQ,EAAAA,YAAYG,SAEtB,GACFmG,eAAe,CACb5C,MAAO,gBACPyB,SAAS,0CACTC,KAAMmB,EAAAA,eACNjB,QAAS,YACP,EAAAO,EAAAA,8BAA6B,CAC3BrG,KAAMQ,EAAAA,YAAYc,gBAEtB,GAEF0F,kBAAkB,CAChB9C,MAAO,aACPyB,SAAS,6BACTC,KAAMqB,EAAAA,qBACNnB,QAAS,YACP,EAAAO,EAAAA,8BAA6B,CAC3BrG,KAAMQ,EAAAA,YAAYgB,YAEtB,GACF0F,SAAS,CACPhD,MAAO,SACPyB,SAAS,mBACTC,KAAMuB,EAAAA,mBACNrB,QAAS,YACP,EAAAO,EAAAA,8BAA6B,CAC3BrG,KAAMQ,EAAAA,YAAY4G,UAEtB,G","sources":["webpack:///./src/screens/UpdateTypesScreen/FilteredTypeScreen.tsx","webpack:///./src/screens/UpdateTypesScreen/typeUpdates.ts"],"sourcesContent":["import React, {memo, useCallback} from 'react';\nimport {ScreenWrapper, UIFlashList} from '@true/ui';\nimport {EOrderUpdate, ETypeUpdate} from '@/store/updates/type';\nimport {styled, useAsyncFn, useNavigationParams} from '@true/core';\nimport {CustomHeader} from '@/components/CustomHeader';\nimport {typeUpdates} from '@/screens/UpdateTypesScreen/typeUpdates';\nimport {useUpdatesByQuery} from '@/store/updates';\nimport {PostThumbnail} from '@/components/PostThumbnail';\nimport {UpdateSkeleton} from '@/components/SkeletonPlaceholder/UpdateSkeleton';\nimport {\n  requestLoadMoreUpdates,\n  requestUpdatePosts,\n} from '@/store/updates/function';\nimport {sleep} from '@/utils/helper';\nimport {useTokenUpdate} from '@/zustand/TokenUpdate';\nimport {EmptyView} from '@/components/EmptyView';\nimport {globalStyles} from '@/utils/globalStyle';\nimport {\n  navigateToCreateCoreValueScreen,\n  navigateToCreateEvent,\n  navigateToCreateLetterScreen,\n  navigateToCreatePollScreen,\n  navigateToCreatePostScreen,\n  navigateToCreateTopicScreen,\n} from '@/utils';\n\nexport interface FilteredTypeScreenParams {\n  type: ETypeUpdate;\n}\n\nexport const FilteredTypeScreen = memo(function FilteredTypeScrenn() {\n  const {type} = useNavigationParams<FilteredTypeScreenParams>();\n  const listUpdatesFiltered = useUpdatesByQuery(type);\n  const ptoken = useTokenUpdate();\n\n  const onCreate = useCallback(() => {\n    switch (type) {\n      case ETypeUpdate.UPDATE:\n      case ETypeUpdate.STYLED:\n      case ETypeUpdate.WELCOME:\n      case ETypeUpdate.IDEA:\n      case ETypeUpdate.ANNOUNCEMENT:\n        return navigateToCreatePostScreen({\n          type: type,\n        });\n      case ETypeUpdate.EVENT:\n        return navigateToCreateEvent({\n          id: -1,\n        });\n      case ETypeUpdate.POLL:\n        return navigateToCreatePollScreen({\n          id: -1,\n        });\n      case ETypeUpdate.TOPIC:\n        return navigateToCreateTopicScreen({\n          id: -1,\n        });\n      case ETypeUpdate.COMPANY_LETTER:\n        return navigateToCreateLetterScreen({\n          id: -1,\n        });\n      case ETypeUpdate.CORE_VALUE:\n        return navigateToCreateCoreValueScreen({\n          id: -1,\n        });\n      default:\n        return null;\n    }\n  }, []);\n  const renderItem = useCallback(({item}: any) => {\n    return <PostThumbnail isInFeed={true} id={item} />;\n  }, []);\n  const [{loading}, refreshHome] = useAsyncFn(async () => {\n    await requestUpdatePosts({order: EOrderUpdate.UPDATE});\n    return;\n  }, []);\n\n  const [{loading: loadingPrev, error: errorPrev}, loadMoreMessage] =\n    useAsyncFn(async () => {\n      await requestLoadMoreUpdates({ptoken});\n      await sleep(0.5);\n      return [];\n    }, [listUpdatesFiltered.length, ptoken]);\n\n  const onEndReached = useCallback(() => {\n    if (loadingPrev) return;\n    // if (errorPrev) return;\n    // if (!messages.length) return;\n    loadMoreMessage().then();\n  }, [loadingPrev, errorPrev, listUpdatesFiltered]);\n  const onLoadData = useCallback(\n    async (isRefreshing: boolean, isLoadMore: boolean) => {\n      if (isLoadMore) {\n        await loadMoreMessage();\n      }\n    },\n    [loadMoreMessage],\n  );\n\n  return (\n    <ScreenWrapper isGrey>\n      <CustomHeader\n        title={typeUpdates[type].title}\n        isSearch={false}\n        onCreate={onCreate}\n        isBack\n        isDivider\n      />\n      <SView style={globalStyles.mt8}>\n        {loading ? (\n          <UpdateSkeleton />\n        ) : (\n          <UIFlashList\n            data={listUpdatesFiltered}\n            renderItem={renderItem}\n            refreshing={loading}\n            onRefresh={refreshHome}\n            onEndReachedThreshold={1}\n            ListEmptyComponent={<EmptyView />}\n            // nestedScrollEnabled={true}\n            // estimatedItemSize={600}\n            removeClippedSubviews={true}\n            onEndReached={onEndReached}\n            onLoadData={onLoadData}\n            loadingMore={loadingPrev}\n            loadMorable\n          />\n        )}\n      </SView>\n    </ScreenWrapper>\n  );\n});\nconst SView = styled.View`\n  flex: 1;\n`;\n","import {\n  IC_FILLED_ANNOUNCEMENT, IC_FILLED_BAR_CHART, IC_FILLED_CORE_VALUE,\n  IC_FILLED_EVENT,\n  IC_FILLED_FEEDS,\n  IC_FILLED_IDEA,\n  IC_FILLED_STAR, IC_FILLED_TEMPLATE,\n  IC_FILLED_TOPIC, IC_FILLED_WELCOME\n} from \"@true/asset\";\nimport { navigateToAnnouncementScreen, navigateToEventScreen, navigateToFilteredTypeScreen } from \"@/utils\";\nimport { ETypeUpdate } from \"@/store/updates/type\";\n\nexport const typeUpdates: {[id: string]: {title: string, icon: any,subTitle:string, onPress: () => void}} = {\n  events:{\n    title: \"Events\",\n    subTitle:'Events taking place in the company or events related to the company',\n    icon: IC_FILLED_EVENT,\n    onPress: navigateToEventScreen\n  },\n  announcement:{\n    title: \"Announcements\",\n    subTitle:'Important announcements, related to policies, regimes, documents',\n    icon: IC_FILLED_ANNOUNCEMENT,\n    onPress:navigateToAnnouncementScreen\n  },\n  update:{\n    title: \"Quick & styled updates\",\n    subTitle:'Quick updates, simple informations and short announcements',\n    icon: IC_FILLED_FEEDS,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.UPDATE\n      })\n    }\n  },\n  idea:{\n    title: \"Ideas\",\n    subTitle:'Ideas are raised want people to discuss. Content is often informal or unofficial',\n    icon: IC_FILLED_IDEA,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.IDEA\n      })\n    }  },\n  topics:{\n    title: \"Topics\",\n    subTitle:'The poster raised the certain topic in the company, gave the opinion and discuss',\n    icon: IC_FILLED_TOPIC,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.TOPIC\n      })\n    }  },\n  polls:{\n    title: \"Polls\",\n    subTitle:'Survey for all employees in the company',\n    icon: IC_FILLED_BAR_CHART,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.POLL\n      })\n    }  },\n  welcome:{\n    title: \"Welcomes\",\n    subTitle:'Welcome new employees',\n    icon: IC_FILLED_WELCOME,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.WELCOME\n      })\n    }  },\n  companyletters:{\n    title: \"Board letters\",\n    subTitle:'Important announcements from the boards',\n    icon: IC_FILLED_STAR,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.COMPANY_LETTER\n      })\n    }\n    },\n  companycorevalues:{\n    title: \"Core value\",\n    subTitle:'Core values of the company',\n    icon: IC_FILLED_CORE_VALUE,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.CORE_VALUE\n      })\n    }  },\n  external:{\n    title: \"Others\",\n    subTitle:'Custom templates',\n    icon: IC_FILLED_TEMPLATE,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.EXTERNAL\n      })\n    }  },\n}\n"],"names":["_templateObject","_react","obj","nodeInterop","__esModule","default","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","require","_ui","_type","_core","_CustomHeader","_typeUpdates","_updates","_PostThumbnail","_UpdateSkeleton","_function","_helper","_TokenUpdate","_EmptyView","_globalStyle","_utils","_jsxRuntime","WeakMap","cacheBabelInterop","cacheNodeInterop","exports","memo","_ref4","type","useNavigationParams","listUpdatesFiltered","useUpdatesByQuery","ptoken","useTokenUpdate","onCreate","useCallback","ETypeUpdate","UPDATE","STYLED","WELCOME","IDEA","ANNOUNCEMENT","navigateToCreatePostScreen","EVENT","navigateToCreateEvent","id","POLL","navigateToCreatePollScreen","TOPIC","navigateToCreateTopicScreen","COMPANY_LETTER","navigateToCreateLetterScreen","CORE_VALUE","navigateToCreateCoreValueScreen","renderItem","_ref","item","jsx","PostThumbnail","isInFeed","_useAsyncFn","useAsyncFn","_asyncToGenerator2","requestUpdatePosts","order","EOrderUpdate","_useAsyncFn2","_slicedToArray2","loading","refreshHome","_useAsyncFn3","requestLoadMoreUpdates","sleep","length","_useAsyncFn4","_useAsyncFn4$","loadingPrev","errorPrev","error","loadMoreMessage","onEndReached","then","onLoadData","isRefreshing","isLoadMore","_x","_x2","apply","arguments","jsxs","ScreenWrapper","isGrey","children","CustomHeader","title","typeUpdates","isSearch","isBack","isDivider","SView","style","globalStyles","mt8","UpdateSkeleton","UIFlashList","data","refreshing","onRefresh","onEndReachedThreshold","ListEmptyComponent","EmptyView","removeClippedSubviews","loadingMore","loadMorable","styled","View","_taggedTemplateLiteralLoose2","_asset","events","subTitle","icon","IC_FILLED_EVENT","onPress","navigateToEventScreen","announcement","IC_FILLED_ANNOUNCEMENT","navigateToAnnouncementScreen","update","IC_FILLED_FEEDS","navigateToFilteredTypeScreen","idea","IC_FILLED_IDEA","topics","IC_FILLED_TOPIC","polls","IC_FILLED_BAR_CHART","welcome","IC_FILLED_WELCOME","companyletters","IC_FILLED_STAR","companycorevalues","IC_FILLED_CORE_VALUE","external","IC_FILLED_TEMPLATE","EXTERNAL"],"sourceRoot":""}