{"version":3,"file":"src_screens_AnnouncementScreen_index_tsx.chunk.bundle","mappings":"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","sources":["webpack:///./src/screens/AnnouncementScreen/AnnouncementThumbnail.tsx","webpack:///./src/screens/AnnouncementScreen/FilterAnnouncement.tsx","webpack:///./src/screens/AnnouncementScreen/index.tsx","webpack:///./src/store/announcements/function.tsx"],"sourcesContent":["import { styled } from \"@true/core\";\nimport React, { memo, useCallback, useMemo } from \"react\";\nimport { FlexCenter, IBase64, STextDivider } from \"@/utils/helper\";\nimport { useAnnouncements } from \"@/store/announcements\";\nimport { Buffer } from \"buffer\";\nimport { getChannels } from \"@/store/channels\";\nimport { UIText } from \"@true/ui\";\nimport { navigateToDetailPostScreen } from \"@/utils\";\nimport { Pressable } from \"react-native\";\nimport moment from \"moment\";\nimport { globalStyles } from \"@/utils/globalStyle\";\nimport { Icons } from \"@true/asset\";\n\ninterface AnnouncementThumbnailProps {\n  id: number | undefined;\n}\n\nexport const AnnouncementThumbnail = memo(function(\n  props: AnnouncementThumbnailProps\n) {\n  const { id } = props;\n  const data = useAnnouncements(id);\n  const channel = getChannels(data?.channel_id || 0);\n  const coverImage = useMemo(() => {\n    const str = Buffer.from(data?.image || \"\", \"base64\").toString(\"utf-8\");\n    if (str) {\n      const _image: IBase64 = JSON.parse(str);\n\n      if (_image && _image.image) {\n        return _image;\n      }\n    }\n    return null;\n  }, [data?.image]);\n  const onNavigateToDetail = useCallback(() => {\n    navigateToDetailPostScreen({\n      id: id || 0,\n    });\n  }, [id]);\n\n  return (\n    <SContainer onPress={onNavigateToDetail}>\n      <SImageView>\n        <SImage source={{ uri: coverImage?.image || \"\" }} resizeMode={\"cover\"} />\n      </SImageView>\n      <SInfoView>\n        <UIText.HeaderSmall numberOfLines={2}>{data?.name}</UIText.HeaderSmall>\n        <SRowCenter style={globalStyles.mt4}>\n          <SIcon source={Icons.Filled.GLOBAL} />\n          <STextGrey numberOfLines={1}>{channel?.name}</STextGrey>\n        </SRowCenter>\n        <SRowCenter>\n          <SIcon source={Icons.Filled.USER} />\n          <STextGrey numberOfLines={1}>{channel?.name}</STextGrey>\n        </SRowCenter>\n        <SRowCenter>\n          <SIcon source={Icons.Filled.CLOCK} />\n          <STextGrey numberOfLines={1}>\n            {moment(\n              // @ts-ignore*/}\n              data?.since * 1000\n            ).format(\"HH:mm DD/MM/YYYY\")}\n          </STextGrey>\n          {data?.seens && data?.seens?.length > 0 ? (\n            <>\n              <STextDivider> | </STextDivider>\n              <STextGreen>{`Seen by ${data?.seens?.length}`} </STextGreen>\n            </>\n          ) : null}\n        </SRowCenter>\n      </SInfoView>\n    </SContainer>\n  );\n});\nconst SContainer = styled(Pressable)`\n  flex-direction: row;\n  padding: 16px;\n  background-color: white;\n  border-bottom-width: 1px;\n  border-bottom-color: ${p => p.theme.neutral6};\n`;\nconst SInfoView = styled.View`\n  flex: 3;\n`;\nconst SImageView = styled.View`\n  display: flex;\n  flex: 2;\n  margin-right: 12px;\n  background-color: ${p => p.theme.neutral7};\n  border-radius: 8px;\n`;\nconst SImage = styled.Image`\n  height: 100%;\n  width: 100%;\n  max-height: 100px;\n  border-radius: 8px;\n`;\nconst STextGrey = styled(UIText.CaptionMedium400)`\n  color: ${p => p.theme.neutral2};\n`;\nconst STextGreen = styled(STextGrey)`\n  color: #05944f;\n`;\nconst SRowCenter = styled(FlexCenter)`\n  margin-bottom: 8px;\n`;\nconst SIcon = styled.Image`\n  width: 16px;\n  height: 16px;\n  tint-color: ${p => p.theme.neutral2};\n  margin-right: 4px;\n`;\n","import {memo} from 'react';\nimport {FlexSpaceBetween} from '@/utils/helper';\nimport {styled} from '@true/core';\nimport {Fonts} from '@true/core';\nimport {globalStyles} from '@/utils/globalStyle';\nimport {Image} from 'react-native';\nimport {Icons} from '@true/asset';\n\nexport const FilterAnnouncement = memo(function () {\n  return (\n    <SContainer>\n      <FlexSpaceBetween>\n        <FilterChannel>\n          <STextBold style={globalStyles.mr4}>All channels</STextBold>\n          <SArrowIcon source={Icons.Outlined.CHEVRON_LEFT} />\n        </FilterChannel>\n        <SSearchIcon>\n          <Image source={Icons.Outlined.MAGNIFYING_GLASS} />\n        </SSearchIcon>\n      </FlexSpaceBetween>\n    </SContainer>\n  );\n});\nconst SContainer = styled.View`\n  background-color: white;\n  padding: 12px 16px;\n`;\n\nconst STextBold = styled.Text`\n  font-family: ${Fonts.Regular};\n\n  font-weight: 700;\n  font-size: 16px;\n  color: #242424;\n`;\nconst FilterChannel = styled.TouchableOpacity`\n  flex-direction: row;\n  align-items: center;\n`;\nconst SArrowIcon = styled.Image`\n  width: 8px;\n  height: 8px;\n  transform: rotate(90deg);\n`;\n\nconst SSearchIcon = styled.TouchableOpacity`\n  width: 24px;\n  height: 24px;\n  align-items: center;\n  justify-content: center;\n`;\n","import React, { memo, useCallback } from \"react\";\nimport { CustomHeader } from \"@/components/CustomHeader\";\nimport { navigateToCreatePostScreen } from \"@/utils\";\nimport { ScreenWrapper, ScrollableTabView } from \"@true/ui\";\nimport { AnnouncementThumbnail } from \"@/screens/AnnouncementScreen/AnnouncementThumbnail\";\nimport { requestAllAnnouncements, requestCreatedAnnouncements } from \"@/store/announcements/function\";\nimport { getAnnouncementsByQuery, useAnnouncementsByQuery } from \"@/store/announcements\";\nimport { FilterAnnouncement } from \"@/screens/AnnouncementScreen/FilterAnnouncement\";\n\nexport const AnnouncementScreen = memo(function() {\n  const renderItem = useCallback(\n    (item: any, index?: number, isLast?: boolean) => {\n      return <AnnouncementThumbnail id={item} key={index} />;\n    },\n    []\n  );\n  const onCreate = useCallback(() => {\n    navigateToCreatePostScreen({\n      type: \"announcement\"\n    });\n  }, []);\n  return (\n    <ScreenWrapper isGrey={true}>\n      <CustomHeader\n        title={\"Announcements\"}\n        isSearch={false}\n        isBack\n        onCreate={onCreate}\n      />\n      <ScrollableTabView.Provider\n        params={{}}\n        renderItem={renderItem}\n        getItemByQuery={getAnnouncementsByQuery}\n        useItemByQuery={useAnnouncementsByQuery}\n        tabs={[\n          {\n            title: \"All\",\n            content: p => (\n              <ScrollableTabView.List\n                index={p.index}\n                ListHeaderComponent={<FilterAnnouncement />}\n                requestFn={requestAllAnnouncements}\n              />\n            )\n          },\n          {\n            title: \"Created by me\",\n            content: p => (\n              <ScrollableTabView.List\n                index={p.index}\n                ListHeaderComponent={<FilterAnnouncement />}\n                requestFn={requestCreatedAnnouncements}\n                query={\"created\"}\n              />\n            )\n          }\n        ]}>\n        <ScrollableTabView.TabBar />\n        <ScrollableTabView.Content />\n      </ScrollableTabView.Provider>\n    </ScreenWrapper>\n  );\n});\n","import {Core, Fetch} from '@true/core';\nimport {batch} from 'react-redux';\nimport {IAnnouncement} from '@/store/announcements/type';\nimport {\n  setAnnouncementsQuery,\n  syncAnnouncements,\n} from '@/store/announcements/index';\n\nexport const requestAllAnnouncements = async () => {\n  const {data} = await Fetch.postWithToken<{\n    anns: IAnnouncement[];\n  }>(`@${Core.systemPath}/inside/ajax/api/announcement/gets`);\n\n  batch(() => {\n    if (data.anns.length) {\n      syncAnnouncements(data.anns);\n      setAnnouncementsQuery(prev => ({\n        ...prev,\n        ['all']: data.anns.map(item => item.id.toString()),\n      }));\n    }\n  });\n  return data.anns;\n};\n\nexport const requestCreatedAnnouncements = async () => {\n  const {data} = await Fetch.postWithToken<{\n    anns: IAnnouncement[];\n  }>(`@${Core.systemPath}/inside/ajax/api/announcement/gets?created=mine`);\n  batch(() => {\n    if (data.anns.length) {\n      syncAnnouncements(data.anns);\n      setAnnouncementsQuery(prev => ({\n        ...prev,\n        ['created']: data.anns.map(item => item.id.toString()),\n      }));\n    }\n  });\n  return data.anns;\n};\n\ninterface IRequestAnnouncementsChannel {\n  path: string;\n  q?: string;\n}\n\nexport const requestAnnouncementsChannel = async (\n  params: IRequestAnnouncementsChannel,\n) => {\n  console.log('params', params);\n  const {data} = await Fetch.postWithToken<{\n    announcements: IAnnouncement[];\n  }>(\n    `@${Core.systemPath}/inside/ajax/api/channel/update/announcement?path=${\n      params.path\n    }${params?.q ? '&q=' + params.q : ''}`,\n  );\n  batch(() => {\n    if (data.announcements.length) {\n      syncAnnouncements(data.announcements);\n      setAnnouncementsQuery(prev => ({\n        ...prev,\n        [params.path]: data.announcements.map(item => item.id.toString()),\n      }));\n    }\n  });\n  return data.announcements;\n};\n\nexport const requestCreatedAnnouncementsChannel = async (\n  params: IRequestAnnouncementsChannel,\n) => {\n  const {data} = await Fetch.postWithToken<{\n    announcements: IAnnouncement[];\n  }>(\n    `@${\n      Core.systemPath\n    }/inside/ajax/api/channel/update/announcement?created=mine&path=${\n      params.path\n    }${params?.q ? '&q=' + params.q : ''}`,\n  );\n  batch(() => {\n    if (data.announcements.length) {\n      // syncAnnouncements(data.announcements);\n      setAnnouncementsQuery(prev => ({\n        ...prev,\n        [`created_${params.path}`]: data.announcements.map(item =>\n          item.id.toString(),\n        ),\n      }));\n    }\n  });\n  return data.announcements;\n};\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_core","require","_react","e","r","__esModule","default","t","_getRequireWildcardCache","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","_helper","_announcements","_buffer","_channels","_ui","_utils","_reactNative","_moment","_interopRequireDefault","_globalStyle","_asset","_jsxRuntime","WeakMap","exports","memo","props","_data$seens","_data$seens2","id","data","useAnnouncements","channel","getChannels","channel_id","coverImage","useMemo","str","Buffer","from","image","toString","_image","JSON","parse","onNavigateToDetail","useCallback","navigateToDetailPostScreen","jsxs","SContainer","onPress","children","jsx","SImageView","SImage","source","uri","resizeMode","SInfoView","UIText","HeaderSmall","numberOfLines","name","SRowCenter","style","globalStyles","mt4","SIcon","Icons","Filled","GLOBAL","STextGrey","USER","CLOCK","moment","since","format","seens","length","Fragment","STextDivider","STextGreen","styled","Pressable","_taggedTemplateLiteralLoose2","p","theme","neutral6","View","neutral7","Image","CaptionMedium400","neutral2","FlexCenter","FlexSpaceBetween","FilterChannel","STextBold","mr4","SArrowIcon","Outlined","CHEVRON_LEFT","SSearchIcon","MAGNIFYING_GLASS","Text","Fonts","Regular","TouchableOpacity","_CustomHeader","_AnnouncementThumbnail","_function","_FilterAnnouncement","renderItem","item","index","isLast","AnnouncementThumbnail","onCreate","navigateToCreatePostScreen","type","ScreenWrapper","isGrey","CustomHeader","title","isSearch","isBack","ScrollableTabView","Provider","params","getItemByQuery","getAnnouncementsByQuery","useItemByQuery","useAnnouncementsByQuery","tabs","content","List","ListHeaderComponent","FilterAnnouncement","requestFn","requestAllAnnouncements","requestCreatedAnnouncements","query","TabBar","Content","_ref","_ref2","_ref3","_ref4","_reactRedux","_index","_asyncToGenerator2","Fetch","postWithToken","Core","systemPath","batch","anns","syncAnnouncements","setAnnouncementsQuery","prev","assign","_defineProperty2","map","apply","arguments","console","log","path","q","announcements","_x","_x2"],"sourceRoot":""}