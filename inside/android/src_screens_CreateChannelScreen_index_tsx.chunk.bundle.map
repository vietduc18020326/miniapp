{"version":3,"file":"src_screens_CreateChannelScreen_index_tsx.chunk.bundle","mappings":"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","sources":["webpack:///./src/screens/CreateChannelScreen/index.tsx","webpack:///./src/screens/CreatePostScreen/HeaderCreatePost.tsx"],"sourcesContent":["import {\n  AnimatedKeyboardAvoidingViewRef,\n  FullScreenWrapper,\n  MyKeyboardAvoidingView,\n  UIInput,\n} from '@true/ui';\nimport React, {memo, useCallback, useRef} from 'react';\nimport {\n  getUser,\n  goBack,\n  styled,\n  ToastService,\n  useAsyncFn,\n  useNavigationParams,\n} from '@true/core';\nimport Animated, {\n  runOnJS,\n  runOnUI,\n  useAnimatedRef,\n  useDerivedValue,\n  useSharedValue,\n} from 'react-native-reanimated';\nimport {AnimatedBottomSpace} from '@/components/AnimatedBottomSpace';\nimport {\n  ETypeChannel,\n  ICreateChannel,\n  initCreateChannel,\n} from '@/store/channels/type';\nimport {HeaderCreatePost} from '@/screens/CreatePostScreen/HeaderCreatePost';\nimport {requestCreateChannel} from '@/store/channels/function';\nimport LoadingModal from '@/components/LoadingModal';\n\nexport interface CreateChannelScreenParams {\n  id: number | string;\n}\nexport const CreateChannelScreen = memo(function () {\n  const params = useSharedValue<ICreateChannel>(initCreateChannel);\n  const {id} = useNavigationParams<CreateChannelScreenParams>();\n  const ref = useRef<AnimatedKeyboardAvoidingViewRef>(null);\n  const scrollRef = useAnimatedRef<any>();\n  const typeChannelOptions = [\n    {\n      label: 'Public, Company-wide',\n      value: ETypeChannel.COMPANY,\n    },\n    {\n      label: 'Team or department',\n      value: ETypeChannel.TEAM,\n    },\n  ];\n  const animatedActiveBtn = useDerivedValue(() => {\n    return !!params.value.name;\n  }, []);\n\n  const [{loading, error: createError}, onPressSubmit] =\n    useAsyncFn(async () => {\n      if (id !== -1) {\n        await requestCreateChannel(params.value);\n      } else {\n        await requestCreateChannel(params.value);\n        ToastService.show('Create channel successfully');\n      }\n      goBack();\n    }, [id, params]);\n  const onChangeValue = useCallback(\n    (key: string, value: any) => {\n      runOnUI((_key: string, _value) => {\n        'worklet';\n\n        params.value = {\n          ...params.value,\n          [_key]: _value,\n        };\n      })(key, value);\n    },\n    [params],\n  );\n\n  return (\n    <FullScreenWrapper>\n      <MyKeyboardAvoidingView ref={ref} scrollRef={scrollRef}>\n        <HeaderCreatePost\n          loading={loading}\n          onPress={onPressSubmit}\n          active={animatedActiveBtn}\n          title={'Create channel'}\n        />\n        <LoadingModal isVisible={loading} />\n        <SScrollView ref={scrollRef} keyboardShouldPersistTaps={'handled'}>\n          <SContainer>\n            <UIInput.Text\n              title={'Channel name'}\n              keyName={'name'}\n              params={params}\n              placeholder={'---'}\n              onChangeValue={onChangeValue}\n              required\n            />\n            <UIInput.Text\n              title={'Channel path'}\n              keyName={'path'}\n              params={params}\n              placeholder={'---'}\n              onChangeValue={onChangeValue}\n              required\n            />\n            <UIInput.Selector\n              title={'Channel type'}\n              keyName={'metatype'}\n              placeholder={'---'}\n              onChangeValue={onChangeValue}\n              options={typeChannelOptions}\n              required\n            />\n            <UIInput.UserPicker\n              title={'Channel admins'}\n              type={'user'}\n              keyName={'owners'}\n              onChangeValue={onChangeValue}\n              multiple\n            />\n            <UIInput.UserPicker\n              title={'Channel members'}\n              type={'user'}\n              params={params}\n              keyName={'followers'}\n              onChangeValue={onChangeValue}\n              multiple\n            />\n            <UIInput.Text\n              title={'Short description'}\n              keyName={'content'}\n              placeholder={'---'}\n              params={params}\n              onChangeValue={onChangeValue}\n              required\n            />\n            <AnimatedBottomSpace />\n          </SContainer>\n        </SScrollView>\n      </MyKeyboardAvoidingView>\n    </FullScreenWrapper>\n  );\n});\nconst SContainer = styled(Animated.View)`\n  flex: 1;\n  gap: 12px;\n  padding: 12px 16px;\n`;\n\nconst SScrollView = styled.ScrollView`\n  flex: 1;\n  background-color: white;\n  margin-top: 8px;\n`;\n","import {memo} from 'react';\nimport {FlexCenter} from '@/utils/helper';\nimport {goBack, styled, useTheme} from '@true/core';\nimport {IC_OUTLINED_LEFT} from '@true/asset';\nimport {UIButton, UIText, UITextStyle} from '@true/ui';\nimport {useAnimatedSafeAreaInsets} from 'react-native-safe-area-context';\nimport Animated, {\n  interpolateColor,\n  SharedValue,\n  useAnimatedProps,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\ninterface HeaderCreatePostProps {\n  active: SharedValue<boolean>;\n  onPress: () => void;\n  loading: boolean;\n  id?: number;\n  onGoBack?: () => void;\n  title: string;\n}\n\nexport const HeaderCreatePost = memo(function (props: HeaderCreatePostProps) {\n  const {aTop} = useAnimatedSafeAreaInsets();\n  const animatedPaddingTop = useAnimatedStyle(() => ({\n    paddingTop: aTop.value,\n  }));\n  const theme = useTheme();\n  const {title, active, id, onPress, loading, onGoBack} = props;\n\n  const animatedBtnStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: interpolateColor(\n        active.value ? 1 : 0,\n        [0, 1],\n        [theme.neutral3, theme.primaryColor],\n      ),\n      width: '100%',\n    };\n  }, [theme]);\n\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      pointerEvents: active.value ? 'auto' : 'none',\n    };\n  });\n\n  // useAutoToastError(createError);\n  return (\n    <HeaderWrapper style={animatedPaddingTop}>\n      <FlexCenter gap={8}>\n        <UIButton\n          source={IC_OUTLINED_LEFT}\n          onPress={onGoBack ? onGoBack : goBack}\n        />\n        <UIText.HeaderLarge>{title}</UIText.HeaderLarge>\n      </FlexCenter>\n      <Animated.View animatedProps={animatedProps as any}>\n        <SCreateBtn\n          title={id ? 'Update' : 'Create'}\n          onPress={onPress}\n          style={animatedBtnStyle}\n        />\n      </Animated.View>\n    </HeaderWrapper>\n  );\n});\nconst HeaderWrapper = styled(Animated.View)`\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  border-bottom-color: ${p => p.theme.neutral4};\n  border-bottom-width: 1px;\n  padding: 6px 16px;\n  background-color: white;\n`;\n\nconst SCreateBtn = styled(UIButton).attrs(p => ({\n  textStyle: {\n    ...UITextStyle.body_medium_500,\n    color: '#fff',\n  },\n}))`\n  width: 94px;\n  height: 32px;\n  border-radius: 8px;\n  align-items: center;\n  justify-content: center;\n  padding: 4px 16px;\n  background-color: ${p => p.theme.primaryColor};\n`;\n"],"names":["_templateObject","_templateObject2","_ui","require","_react","_interopRequireWildcard","_core","_reactNativeReanimated","_AnimatedBottomSpace","_type","_HeaderCreatePost","_function","_LoadingModal","_interopRequireDefault","_jsxRuntime","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_worklet_13286397810896_init_data","code","_worklet_690685769123_init_data","SContainer","exports","memo","anonymous","params","useSharedValue","initCreateChannel","id","useNavigationParams","ref","useRef","scrollRef","useAnimatedRef","typeChannelOptions","label","value","ETypeChannel","COMPANY","TEAM","animatedActiveBtn","useDerivedValue","name","__closure","__initData","__workletHash","_useAsyncFn","useAsyncFn","_asyncToGenerator2","requestCreateChannel","ToastService","show","goBack","_useAsyncFn2","_slicedToArray2","_useAsyncFn2$","loading","onPressSubmit","error","onChangeValue","useCallback","runOnUI","_key","_value","assign","_defineProperty2","jsx","FullScreenWrapper","children","jsxs","MyKeyboardAvoidingView","HeaderCreatePost","onPress","active","title","isVisible","SScrollView","keyboardShouldPersistTaps","UIInput","Text","keyName","placeholder","required","Selector","options","UserPicker","type","multiple","AnimatedBottomSpace","styled","Animated","View","_taggedTemplateLiteralLoose2","ScrollView","_helper","_asset","_reactNativeSafeAreaContext","_worklet_9978501313055_init_data","_worklet_16470896921808_init_data","_worklet_14091630795489_init_data","HeaderWrapper","props","aTop","useAnimatedSafeAreaInsets","animatedPaddingTop","useAnimatedStyle","paddingTop","theme","useTheme","onGoBack","animatedBtnStyle","backgroundColor","interpolateColor","neutral3","primaryColor","width","animatedProps","useAnimatedProps","pointerEvents","style","FlexCenter","gap","UIButton","source","IC_OUTLINED_LEFT","UIText","HeaderLarge","SCreateBtn","p","neutral4","attrs","textStyle","UITextStyle","body_medium_500","color"],"sourceRoot":""}