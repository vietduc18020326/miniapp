{"version":3,"file":"src_screens_ChannelScreen_index_tsx.chunk.bundle","mappings":"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","sources":["webpack:///./src/screens/ChannelScreen/ChannelThumbnail.tsx","webpack:///./src/screens/ChannelScreen/index.tsx"],"sourcesContent":["import {Fonts, getUserByQuery, styled} from '@true/core';\nimport React, {memo, useCallback} from 'react';\nimport {useChannels} from '@/store/channels';\nimport {navigateToDetailChannelScreen} from '@/utils';\nimport FastImage from 'react-native-fast-image';\nimport {globalStyles} from '@/utils/globalStyle';\nimport {Dimensions, View} from 'react-native';\nimport {IC_OUTLINED_PUBLIC} from '@true/asset';\nimport {IMAGE_THUMBNAIL_CHANNEL} from '@true/asset';\n\ninterface ChannelThumbnailProps {\n  id: number;\n}\n\nexport const ChannelThumbnail = memo(function (props: ChannelThumbnailProps) {\n  const {id} = props;\n  const channel = useChannels(id);\n  const onPress = useCallback(() => {\n    navigateToDetailChannelScreen({\n      id: id,\n      path: channel?.path || '',\n    });\n  }, []);\n\n  return (\n    <SContainer onPress={onPress}>\n      <SCoverImage\n        source={\n          channel?.image ? {uri: channel?.image} : IMAGE_THUMBNAIL_CHANNEL\n        }\n        resizeMode={'cover'}\n      />\n      <SIconChannel>\n        <SImage source={IC_OUTLINED_PUBLIC} />\n      </SIconChannel>\n      <SWrapperView>\n        <View>\n          <STextTitle numberOfLines={2} style={globalStyles.mt4}>\n            {channel?.name}\n          </STextTitle>\n          <STextGrey style={globalStyles.mt4}>\n            {channel?.metatype === 'company' ? 'Company-wide' : 'Group'}\n          </STextGrey>\n        </View>\n        <STextGreyBold style={globalStyles.mt8}>\n          {channel?.metatype === 'company'\n            ? getUserByQuery('allIds').length\n            : channel?.followers.length}{' '}\n          members\n        </STextGreyBold>\n      </SWrapperView>\n    </SContainer>\n  );\n});\nconst widthScreen = Dimensions.get('window').width;\nconst SContainer = styled.TouchableOpacity`\n  background-color: white;\n  border-radius: 8px;\n  align-items: center;\n  margin-top: 8px;\n  width: ${(widthScreen - 16) / 2 - 16}px;\n  padding-bottom: 8px;\n  border: 1px solid ${p => p.theme.neutral5};\n  height: 210px;\n`;\nconst SCoverImage = styled(FastImage)`\n  width: 100%;\n  height: 100px;\n  max-height: 100px;\n  border-top-right-radius: 8px;\n  border-top-left-radius: 8px;\n  background-color: #1c1ca3;\n`;\nconst SWrapperView = styled.View`\n  flex: 1;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst STextTitle = styled.Text`\n  color: ${p => p.theme.neutral1};\n  text-align: center;\n  font-family: ${Fonts.Regular};\n  font-size: 16px;\n\n  font-weight: 500;\n  width: 149px;\n  line-height: 24px; /* 150% */\n`;\nconst STextGrey = styled.Text`\n  color: ${p => p.theme.neutral2};\n  font-family: ${Fonts.Regular};\n  font-size: 12px;\n\n  font-weight: 400;\n  line-height: 16px; /* 133.333% */\n  text-align: center;\n`;\nconst STextGreyBold = styled(STextGrey)`\n  font-weight: 500;\n`;\nconst SIconChannel = styled.View`\n  width: 40px;\n  height: 40px;\n  background-color: ${p => p.theme.primaryColor};\n  border-radius: 8px;\n  border: 2.22222px solid #ffffff;\n  margin-top: -32px;\n  align-items: center;\n  justify-content: center;\n`;\nconst SImage = styled.Image`\n  width: 24px;\n  height: 24px;\n  tint-color: #fff;\n`;\n","import {ScreenWrapper, ScrollableTabView, UIFlashList} from '@true/ui';\nimport React, {memo, useCallback, useMemo, useState} from 'react';\nimport {ChannelThumbnail} from '@/screens/ChannelScreen/ChannelThumbnail';\nimport {\n  requestAllChannels,\n  requestJoinedChannels,\n} from '@/store/channels/function';\nimport {\n  getChannels,\n  getChannelsByQuery,\n  useChannelsByQuery,\n} from '@/store/channels';\nimport {normalizeStringForSearch, styled, useMe} from '@true/core';\nimport {EUserRole} from '@/utils/helper';\nimport {CustomHeader} from '@/components/CustomHeader';\nimport {navigateToCreateChannelScreen} from '@/utils';\nimport {IFilterParams} from '@/screens/SearchScreen/type';\nimport {EmptySearchView} from '@/components/EmptyView';\nimport {IMAGE_EMPTY_SEARCH} from '@true/asset';\n\nexport const ChannelScreen = memo(function () {\n  const me = useMe();\n  const [params, setParams] = useState<IFilterParams>({});\n  const [search, setSearch] = useState('');\n  const isAdmin = useMemo(() => {\n    return Number(me?.role) === EUserRole.ADMIN;\n  }, []);\n  const renderItem = useCallback(\n    (item: any, index?: number, isLast?: boolean) => {\n      return <ChannelThumbnail id={item} />;\n    },\n    [],\n  );\n  const renderItemFlashList = useCallback(({item}: any) => {\n    return <ChannelThumbnail id={item} />;\n  }, []);\n\n  const onChangeText = useCallback(\n    async (q: string) => {\n      setSearch(q);\n    },\n    [params],\n  );\n\n  const onCreateChannel = useCallback(() => {\n    navigateToCreateChannelScreen({\n      id: -1,\n    });\n  }, []);\n  const onSetData = useCallback(\n    (prevData: string[]) => {\n      return (prevData || []).filter(item =>\n        normalizeStringForSearch(\n          getChannels(item as string)?.name || '',\n        ).includes(search),\n      );\n    },\n    [search],\n  );\n  const channelIds = useMemo(() => {\n    const ids = getChannelsByQuery('all') || [];\n    return onSetData(ids);\n  }, [search, onSetData]);\n  const renderContent = useMemo(() => {\n    if (me && Number(me.role) === EUserRole.ADMIN) {\n      return (\n        <ScrollableTabView.Provider\n          params={{}}\n          renderItem={renderItem}\n          getItemByQuery={getChannelsByQuery}\n          useItemByQuery={useChannelsByQuery}\n          tabs={[\n            {\n              title: 'Joined channels',\n              content: (p: any) => (\n                <ScrollableTabView.List\n                  {...p}\n                  itemHeight={210}\n                  requestFn={requestJoinedChannels}\n                  tab={'joined'}\n                  numColumns={2}\n                  setData={onSetData}\n                />\n              ),\n            },\n            {\n              title: 'All channels',\n              content: (p: any) => (\n                <ScrollableTabView.List\n                  {...p}\n                  itemHeight={210}\n                  requestFn={requestAllChannels}\n                  numColumns={2}\n                  setData={onSetData}\n                />\n              ),\n            },\n          ]}>\n          <ScrollableTabView.TabBar />\n          <SContentWrapper>\n            <ScrollableTabView.Content />\n          </SContentWrapper>\n        </ScrollableTabView.Provider>\n      );\n    } else\n      return (\n        <SContentWrapper>\n          <UIFlashList\n            data={channelIds}\n            renderItem={renderItemFlashList}\n            numColumns={2}\n            estimatedItemSize={210}\n            ListEmptyComponent={\n              <EmptySearchView\n                title={'No channel was found'}\n                image={IMAGE_EMPTY_SEARCH}\n              />\n            }\n          />\n        </SContentWrapper>\n      );\n  }, [me, search, channelIds, renderItem, renderItemFlashList]);\n\n  return (\n    <ScreenWrapper isGrey={false}>\n      <CustomHeader\n        onCreate={onCreateChannel}\n        hideCreateButton={!isAdmin}\n        title={'Channel'}\n        isSearch\n        onChangeText={onChangeText}\n      />\n      {renderContent}\n    </ScreenWrapper>\n  );\n});\nconst SContentWrapper = styled.View`\n  flex: 1;\n  margin-left: 12px;\n`;\nexport default ChannelScreen;\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_core","require","_react","obj","nodeInterop","__esModule","default","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","_channels","_utils","_reactNativeFastImage","_interopRequireDefault","_globalStyle","_reactNative","_asset","_jsxRuntime","WeakMap","cacheBabelInterop","cacheNodeInterop","exports","memo","props","id","channel","useChannels","onPress","useCallback","navigateToDetailChannelScreen","path","jsxs","SContainer","children","jsx","SCoverImage","source","image","uri","IMAGE_THUMBNAIL_CHANNEL","resizeMode","SIconChannel","SImage","IC_OUTLINED_PUBLIC","SWrapperView","View","STextTitle","numberOfLines","style","globalStyles","mt4","name","STextGrey","metatype","STextGreyBold","mt8","getUserByQuery","length","followers","widthScreen","Dimensions","width","styled","TouchableOpacity","_taggedTemplateLiteralLoose2","p","theme","neutral5","FastImage","Text","neutral1","Fonts","Regular","neutral2","primaryColor","Image","_ui","_ChannelThumbnail","_function","_helper","_CustomHeader","_EmptyView","ChannelScreen","_ref2","me","useMe","_useState","useState","_useState2","_slicedToArray2","params","_useState3","_useState4","search","setSearch","isAdmin","useMemo","Number","role","EUserRole","ADMIN","renderItem","item","index","isLast","ChannelThumbnail","renderItemFlashList","_ref","onChangeText","_asyncToGenerator2","q","_x","apply","arguments","onCreateChannel","navigateToCreateChannelScreen","onSetData","prevData","filter","_getChannels","normalizeStringForSearch","getChannels","includes","channelIds","ids","getChannelsByQuery","renderContent","ScrollableTabView","Provider","getItemByQuery","useItemByQuery","useChannelsByQuery","tabs","title","content","List","assign","itemHeight","requestFn","requestJoinedChannels","tab","numColumns","setData","requestAllChannels","TabBar","SContentWrapper","Content","UIFlashList","data","estimatedItemSize","ListEmptyComponent","EmptySearchView","IMAGE_EMPTY_SEARCH","ScreenWrapper","isGrey","CustomHeader","onCreate","hideCreateButton","isSearch"],"sourceRoot":""}