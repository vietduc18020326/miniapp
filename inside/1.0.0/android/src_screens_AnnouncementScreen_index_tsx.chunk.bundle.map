{"version":3,"file":"src_screens_AnnouncementScreen_index_tsx.chunk.bundle","mappings":"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","sources":["webpack:///./src/screens/AnnouncementScreen/AnnouncementThumbnail.tsx","webpack:///./src/screens/AnnouncementScreen/FilterAnnouncement.tsx","webpack:///./src/screens/AnnouncementScreen/index.tsx","webpack:///./src/store/announcements/function.tsx"],"sourcesContent":["import { Fonts, getUser, styled } from \"@true/core\";\nimport React, { memo, useCallback } from \"react\";\nimport { FlexCenter, IBase64, STextDivider } from \"@/utils/helper\";\nimport { useAnnouncements } from \"@/store/announcements\";\nimport { Buffer } from \"buffer\";\nimport { getChannels } from \"@/store/channels\";\nimport { UIText } from \"@true/ui\";\nimport { navigateToDetailPostScreen } from \"@/utils\";\nimport { Pressable } from \"react-native\";\nimport { IC_FILLED_PERSON, IC_FILLED_PUBLIC, IC_FILLED_SCHEDULE } from \"@true/asset\";\nimport moment from \"moment\";\nimport { globalStyles } from \"@/utils/globalStyle\";\n\ninterface AnnouncementThumbnailProps {\n  id: number | undefined;\n}\n\nexport const AnnouncementThumbnail = memo(function(\n  props: AnnouncementThumbnailProps\n) {\n  const { id } = props;\n  const data = useAnnouncements(id);\n  const channel = getChannels(data?.channel_id || 0);\n  const coverImage: IBase64 = JSON.parse(\n    Buffer.from(data?.image || \"\", \"base64\").toString(\"utf-8\")\n  );\n  const onNavigateToDetail = useCallback(() => {\n    navigateToDetailPostScreen({\n      id: id || 0,\n      user_id: data?.user_id || 0,\n      time: data?.since || 0,\n      hid: data?.hid || \"\"\n    });\n  }, [id]);\n\n  return (\n    <SContainer onPress={onNavigateToDetail}>\n      <SImageView>\n        <SImage source={{ uri: coverImage.image }} resizeMode={\"cover\"} />\n      </SImageView>\n      <SInfoView>\n        <UIText.HeaderSmall numberOfLines={2}>{data?.name}</UIText.HeaderSmall>\n        <SRowCenter style={globalStyles.mt4}>\n          <SIcon source={IC_FILLED_PUBLIC} />\n          <STextGrey numberOfLines={1}>{channel?.name}</STextGrey>\n        </SRowCenter>\n        <SRowCenter>\n          <SIcon source={IC_FILLED_PERSON} />\n          <STextGrey numberOfLines={1}>{channel?.name}</STextGrey>\n        </SRowCenter>\n        <SRowCenter>\n          <SIcon source={IC_FILLED_SCHEDULE} />\n          <STextGrey numberOfLines={1}>{moment(\n            // @ts-ignore*/}\n            data?.since * 1000\n          ).format(\"HH:mm DD/MM/YYYY\")}</STextGrey>\n          {data?.seens && data?.seens?.length > 0 ?\n            <>\n              <STextDivider> | </STextDivider>\n              <STextGreen>{`Seen by ${data?.seens?.length}`} </STextGreen>\n            </> : null}\n        </SRowCenter>\n      </SInfoView>\n    </SContainer>\n  );\n});\nconst SContainer = styled(Pressable)`\n  flex-direction: row;\n  padding: 16px;\n  background-color: white;\n  border-bottom-width: 1px;\n  border-bottom-color: ${p => p.theme.neutral6};\n`;\nconst SInfoView = styled.View`\n  flex: 3;\n`;\nconst SImageView = styled.View`\n  display: flex;\n  flex: 2;\n  margin-right: 12px;\n  background-color: ${p => p.theme.neutral7};\n  border-radius: 8px;\n`;\nconst SImage = styled.Image`\n  height: 100%;\n  width: 100%;\n  max-height: 100px;\n  border-radius: 8px;\n`;\nconst STextGrey = styled(UIText.CaptionMedium400)`\n  color: ${p => p.theme.neutral2};\n`;\nconst STextGreen = styled(STextGrey)`\n  color: #05944f;\n`;\nconst SRowCenter = styled(FlexCenter)`\n  margin-bottom: 8px;\n`;\nconst SIcon = styled.Image`\n  width: 16px;\n  height: 16px;\n  tint-color: ${p => p.theme.neutral2};\n  margin-right: 4px;\n`;\n","import {memo} from 'react';\nimport {FlexSpaceBetween} from '@/utils/helper';\nimport {styled} from '@true/core';\nimport {Fonts} from '@true/core';\nimport {IC_OUTLINED_LEFT, IC_OUTLINED_SEARCH} from '@true/asset';\nimport {globalStyles} from '@/utils/globalStyle';\nimport {Image} from 'react-native';\n\nexport const FilterAnnouncement = memo(function () {\n  return (\n    <SContainer>\n      <FlexSpaceBetween>\n        <FilterChannel>\n          <STextBold style={globalStyles.mr4}>All channels</STextBold>\n          <SArrowIcon source={IC_OUTLINED_LEFT} />\n        </FilterChannel>\n        <SSearchIcon>\n          <Image source={IC_OUTLINED_SEARCH} />\n        </SSearchIcon>\n      </FlexSpaceBetween>\n    </SContainer>\n  );\n});\nconst SContainer = styled.View`\n  background-color: white;\n  padding: 12px 16px;\n`;\n\nconst STextBold = styled.Text`\n  font-family: ${Fonts.Regular};\n  \n  font-weight: 700;\n  font-size: 16px;\n  color: #242424;\n`;\nconst FilterChannel = styled.TouchableOpacity`\n  flex-direction: row;\n  align-items: center;\n`;\nconst SArrowIcon = styled.Image`\n  width: 8px;\n  height: 8px;\n  transform: rotate(90deg);\n`;\n\nconst SSearchIcon = styled.TouchableOpacity`\n  width: 24px;\n  height: 24px;\n  align-items: center;\n  justify-content: center;\n`;\n","import React, { memo, useCallback } from \"react\";\nimport { CustomHeader } from \"@/components/CustomHeader\";\nimport { navigateToCreatePostScreen } from \"@/utils\";\nimport { ScreenWrapper, ScrollableTabView } from \"@true/ui\";\nimport { AnnouncementThumbnail } from \"@/screens/AnnouncementScreen/AnnouncementThumbnail\";\nimport { requestAllAnnouncements, requestCreatedAnnouncements } from \"@/store/announcements/function\";\nimport { getAnnouncementsByQuery, useAnnouncementsByQuery } from \"@/store/announcements\";\nimport { FilterAnnouncement } from \"@/screens/AnnouncementScreen/FilterAnnouncement\";\n\nexport const AnnouncementScreen = memo(function() {\n  const renderItem = useCallback(\n    (item: any, index?: number, isLast?: boolean) => {\n      return <AnnouncementThumbnail id={item} key={index} />;\n    },\n    []\n  );\n  const onCreate = useCallback(() => {\n    navigateToCreatePostScreen({\n      type: \"announcement\"\n    });\n  }, []);\n  return (\n    <ScreenWrapper isGrey={true}>\n      <CustomHeader\n        title={\"Announcements\"}\n        isSearch={false}\n        isBack\n        onCreate={onCreate}\n      />\n      <ScrollableTabView.Provider\n        params={{}}\n        renderItem={renderItem}\n        getItemByQuery={getAnnouncementsByQuery}\n        useItemByQuery={useAnnouncementsByQuery}\n        tabs={[\n          {\n            title: \"All\",\n            content: p => (\n              <ScrollableTabView.List\n                index={p.index}\n                ListHeaderComponent={<FilterAnnouncement />}\n                requestFn={requestAllAnnouncements}\n              />\n            )\n          },\n          {\n            title: \"Created by me\",\n            content: p => (\n              <ScrollableTabView.List\n                index={p.index}\n                ListHeaderComponent={<FilterAnnouncement />}\n                requestFn={requestCreatedAnnouncements}\n                query={\"created\"}\n              />\n            )\n          }\n        ]}>\n        <ScrollableTabView.TabBar />\n        <ScrollableTabView.Content />\n      </ScrollableTabView.Provider>\n    </ScreenWrapper>\n  );\n});\n","import {Core, Fetch} from '@true/core';\nimport {batch} from 'react-redux';\nimport {IAnnouncement} from '@/store/announcements/type';\nimport {\n  setAnnouncementsQuery,\n  syncAnnouncements,\n} from '@/store/announcements/index';\n\nexport const requestAllAnnouncements = async () => {\n  const {data} = await Fetch.postWithToken<{\n    anns: IAnnouncement[];\n  }>(`@${Core.systemPath}/inside/ajax/api/announcement/gets`);\n\n  batch(() => {\n    if (data.anns.length) {\n      syncAnnouncements(data.anns);\n      setAnnouncementsQuery(prev => ({\n        ...prev,\n        ['all']: data.anns.map(item => item.id.toString()),\n      }));\n    }\n  });\n  return data.anns;\n};\n\nexport const requestCreatedAnnouncements = async () => {\n  const {data} = await Fetch.postWithToken<{\n    anns: IAnnouncement[];\n  }>(`@${Core.systemPath}/inside/ajax/api/announcement/gets?created=mine`);\n  batch(() => {\n    if (data.anns.length) {\n      syncAnnouncements(data.anns);\n      setAnnouncementsQuery(prev => ({\n        ...prev,\n        ['created']: data.anns.map(item => item.id.toString()),\n      }));\n    }\n  });\n  return data.anns;\n};\n\ninterface IRequestAnnouncementsChannel {\n  path: string;\n  q?: string;\n}\n\nexport const requestAnnouncementsChannel = async (\n  params: IRequestAnnouncementsChannel,\n) => {\n  console.log('params', params);\n  const {data} = await Fetch.postWithToken<{\n    announcements: IAnnouncement[];\n  }>(\n    `@${Core.systemPath}/inside/ajax/api/channel/update/announcement?path=${\n      params.path\n    }${params?.q ? '&q=' + params.q : ''}`,\n  );\n  batch(() => {\n    if (data.announcements.length) {\n      syncAnnouncements(data.announcements);\n      setAnnouncementsQuery(prev => ({\n        ...prev,\n        [params.path]: data.announcements.map(item => item.id.toString()),\n      }));\n    }\n  });\n  return data.announcements;\n};\n\nexport const requestCreatedAnnouncementsChannel = async (\n  params: IRequestAnnouncementsChannel,\n) => {\n  const {data} = await Fetch.postWithToken<{\n    announcements: IAnnouncement[];\n  }>(\n    `@${\n      Core.systemPath\n    }/inside/ajax/api/channel/update/announcement?created=mine&path=${\n      params.path\n    }${params?.q ? '&q=' + params.q : ''}`,\n  );\n  batch(() => {\n    if (data.announcements.length) {\n      // syncAnnouncements(data.announcements);\n      setAnnouncementsQuery(prev => ({\n        ...prev,\n        [`created_${params.path}`]: data.announcements.map(item =>\n          item.id.toString(),\n        ),\n      }));\n    }\n  });\n  return data.announcements;\n};\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_core","require","_react","obj","nodeInterop","__esModule","default","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","_helper","_announcements","_buffer","_channels","_ui","_utils","_reactNative","_asset","_moment","_interopRequireDefault","_globalStyle","_jsxRuntime","WeakMap","cacheBabelInterop","cacheNodeInterop","exports","memo","props","_data$seens","_data$seens2","id","data","useAnnouncements","channel","getChannels","channel_id","coverImage","JSON","parse","Buffer","from","image","toString","onNavigateToDetail","useCallback","navigateToDetailPostScreen","user_id","time","since","hid","jsxs","SContainer","onPress","children","jsx","SImageView","SImage","source","uri","resizeMode","SInfoView","UIText","HeaderSmall","numberOfLines","name","SRowCenter","style","globalStyles","mt4","SIcon","IC_FILLED_PUBLIC","STextGrey","IC_FILLED_PERSON","IC_FILLED_SCHEDULE","moment","format","seens","length","Fragment","STextDivider","STextGreen","styled","Pressable","_taggedTemplateLiteralLoose2","p","theme","neutral6","View","neutral7","Image","CaptionMedium400","neutral2","FlexCenter","FlexSpaceBetween","FilterChannel","STextBold","mr4","SArrowIcon","IC_OUTLINED_LEFT","SSearchIcon","IC_OUTLINED_SEARCH","Text","Fonts","Regular","TouchableOpacity","_CustomHeader","_AnnouncementThumbnail","_function","_FilterAnnouncement","renderItem","item","index","isLast","AnnouncementThumbnail","onCreate","navigateToCreatePostScreen","type","ScreenWrapper","isGrey","CustomHeader","title","isSearch","isBack","ScrollableTabView","Provider","params","getItemByQuery","getAnnouncementsByQuery","useItemByQuery","useAnnouncementsByQuery","tabs","content","List","ListHeaderComponent","FilterAnnouncement","requestFn","requestAllAnnouncements","requestCreatedAnnouncements","query","TabBar","Content","_ref","_ref2","_ref3","_ref4","_reactRedux","_index","_asyncToGenerator2","Fetch","postWithToken","Core","systemPath","batch","anns","syncAnnouncements","setAnnouncementsQuery","prev","assign","_defineProperty2","map","apply","arguments","console","log","path","q","announcements","_x","_x2"],"sourceRoot":""}