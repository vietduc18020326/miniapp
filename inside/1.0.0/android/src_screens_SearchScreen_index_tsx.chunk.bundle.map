{"version":3,"file":"src_screens_SearchScreen_index_tsx.chunk.bundle","mappings":"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","sources":["webpack:///./src/components/EmptyView.tsx","webpack:///./src/components/FilterIcon/index.tsx","webpack:///./src/screens/SearchScreen/index.tsx","webpack:///./src/utils/filter.ts"],"sourcesContent":["import React, {memo} from 'react';\nimport FastImage from 'react-native-fast-image';\nimport {\n  ImageRequireSource,\n  TouchableOpacityProps,\n  ViewStyle,\n} from 'react-native';\nimport {styled} from '@true/core';\nimport {Fonts} from '@true/core';\nimport {UIBottomButton, UIText} from '@true/ui';\nimport {globalStyles} from '@/utils/globalStyle';\nimport Metrics from '@/assets/Metrics';\nimport {flatStyles} from '@true/core';\nimport {IMAGE_EMPTY_SEARCH} from '@true/asset';\nimport {FlexCenter} from '@/utils/helper';\n\ninterface EmptySearchProps {\n  style?: ViewStyle;\n  image: ImageRequireSource;\n  size?: number;\n  buttons?: IButton[];\n  title?: string;\n  subTitle?: string;\n}\n\ninterface IButton extends TouchableOpacityProps {\n  title: string;\n  onPress?: () => void;\n  textColor?: string;\n  backgroundColor?: string;\n  loading?: boolean;\n}\n\nexport const EmptySearchView = memo(\n  ({style, image, size, title, subTitle, buttons}: EmptySearchProps) => {\n    return (\n      <SContainer\n        style={flatStyles(style, {\n          height: (Metrics.screen.height * 2) / 3,\n          ...style,\n        })}>\n        <SImageView>\n          <SImage source={image} size={size} />\n          {title && <UIText.BodyLarge500>{title}</UIText.BodyLarge500>}\n          {subTitle && <SSubText>{subTitle}</SSubText>}\n          <STextGrey>Please try again by:</STextGrey>\n          <SWhiteBox>\n            <FlexCenter>\n              <SDot />\n              <STextGrey>Check your spelling</STextGrey>\n            </FlexCenter>\n            <FlexCenter>\n              <SDot />\n              <STextGrey>Try again by other keywords</STextGrey>\n            </FlexCenter>\n            <FlexCenter>\n              <SDot />\n              <STextGrey>Try again with shorter keywords</STextGrey>\n            </FlexCenter>\n            <FlexCenter>\n              <SDot />\n              <STextGrey>Try again with more general keywords </STextGrey>\n            </FlexCenter>\n          </SWhiteBox>\n        </SImageView>\n\n        {buttons && buttons.length > 0 && (\n          <UIBottomButton\n            style={{marginHorizontal: 16, marginTop: 40}}\n            // @ts-ignore\n            buttons={buttons}\n          />\n        )}\n      </SContainer>\n    );\n  },\n);\n\ninterface EmptyViewProps {\n  style?: ViewStyle;\n  image?: ImageRequireSource;\n  size?: number;\n  text?: string;\n}\n\nexport const EmptyView = memo(({image, style, size, text}: EmptyViewProps) => {\n  return (\n    <SContainer style={flatStyles(style)}>\n      <SImage source={image || IMAGE_EMPTY_SEARCH} size={size} />\n      <STextBlack style={globalStyles.mt16}>{text || 'No data'}</STextBlack>\n    </SContainer>\n  );\n});\n\nconst SContainer = styled.View`\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst SImageView = styled.View`\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  width: 100%;\n  padding: 0 16px;\n`;\n\nconst SImage = styled(FastImage)<{size?: number}>`\n  width: ${p => p.size || 120}px;\n  height: ${p => p.size || 120}px;\n`;\n\nconst SSubText = styled.Text`\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n  font-family: ${Fonts.Regular};\n  text-align: center;\n  color: ${p => p.theme.neutral2};\n`;\n\nconst STextBold = styled.Text`\n  color: ${p => p.theme.grey1};\n  font-size: 24px;\n  line-height: 32px;\n  font-family: ${Fonts.Bold};\n  margin-top: 12px;\n  margin-bottom: 4px;\n`;\n\nconst STextBlack = styled(SSubText)`\n  font-size: 16px;\n  line-height: 24px;\n  font-family: ${Fonts.Medium};\n`;\nconst SWhiteBox = styled.View`\n  display: flex;\n  padding: 12px;\n  width: 100%;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  gap: 4px;\n  border-radius: 8px;\n  border: 1px solid ${p => p.theme.neutral5};\n  background-color: #fff;\n`;\nconst SDot = styled.View`\n  background-color: ${p => p.theme.neutral2};\n  width: 4px;\n  height: 4px;\n  border-radius: 2px;\n  margin: 0 8px;\n`;\nconst STextGrey = styled(UIText.BodyMedium400)`\n  color: ${p => p.theme.neutral2};\n`;\n","import React, {memo} from 'react';\nimport {IC_OUTLINED_FILTER} from '@true/core';\nimport {getCountFilter} from '@/utils/filter';\nimport {styled} from '@true/core';\nimport {Colors} from '@true/core';\nimport {TouchableOpacityProps} from 'react-native';\n\nexport const FilterIcon = memo(\n  ({params, ...rest}: {params: any} & TouchableOpacityProps) => {\n    return (\n      // @ts-ignore\n      <SBackBtn\n        {...rest}\n        style={{\n          width: 48,\n          height: 48,\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}>\n        <SBackIc source={IC_OUTLINED_FILTER} />\n        <CountFilterView count={getCountFilter(params)} />\n      </SBackBtn>\n    );\n  },\n);\n\nconst SBackBtn = styled.TouchableOpacity.attrs(p => ({\n  hitSlop: {\n    top: 8,\n    bottom: 8,\n    left: 8,\n    right: 8,\n  },\n}))``;\n\nconst SBackIc = styled.Image``;\n\nconst CountFilterView = memo(({count}: {count: number}) => {\n  if (!count) return null;\n  return (\n    <SCountContainer>\n      <SCountText>{count}</SCountText>\n    </SCountContainer>\n  );\n});\n\nconst SCountContainer = styled.View`\n  position: absolute;\n  border-radius: 10px;\n  width: 16px;\n  height: 16px;\n  align-items: center;\n  justify-content: center;\n  background-color: red;\n  top: 5px;\n  right: 5px;\n`;\nconst SCountText = styled.Text`\n  color: ${Colors.white};\n  font-size: 10px;\n  line-height: 16px;\n`;\n","import {RecycleList, ScreenWrapper} from '@true/ui';\nimport React, {memo, useCallback, useEffect, useState} from 'react';\nimport {\n  Colors,\n  Fonts,\n  goBack,\n  styled,\n  useNavigationParams,\n  useTheme,\n} from '@true/core';\nimport {IC_OUTLINED_BACKWARD} from '@true/asset';\n\nimport {useAnimatedSafeAreaInsets} from 'react-native-safe-area-context';\nimport Animated, {useAnimatedStyle} from 'react-native-reanimated';\nimport {MySearchBar} from '@/screens/SearchScreen/SearchBar';\nimport {requestSearchUpdates} from '@/store/updates/function';\nimport {useAsyncFn} from '@/hooks/useAsyncFn';\nimport SkeletonPlaceholder from 'react-native-skeleton-placeholder';\nimport Metrics from '@/assets/Metrics';\nimport {View} from 'react-native';\nimport {useUpdatesByQuery} from '@/store/updates';\nimport {PostThumbnail} from '@/components/PostThumbnail';\nimport {EmptySearchView} from '@/components/EmptyView';\nimport {IFilterParams} from '@/screens/SearchScreen/type';\nimport {FilterIcon} from '@/components/FilterIcon';\nimport {navigateToFilterScreen} from '@/utils';\nimport {IMAGE_EMPTY_SEARCH} from '@true/asset';\n\nexport interface SearchScreenParams {\n  isFilter: boolean;\n}\nexport const SearchScreen = memo(function () {\n  const {isFilter} = useNavigationParams<SearchScreenParams>();\n  const {aTop} = useAnimatedSafeAreaInsets();\n  const animatedPaddingTop = useAnimatedStyle(() => ({\n    paddingTop: aTop.value,\n  }));\n  const searchUpdatesIds = useUpdatesByQuery('search');\n  const [params, setParams] = useState<IFilterParams>({});\n  const [isTexting, setTexting] = useState(false);\n  const [value, setValue] = useState('');\n\n  const [{loading}, onRequest] = useAsyncFn(async (_value: any) => {\n    const _params: any = {\n      q: _value.q,\n    };\n    await requestSearchUpdates(_params);\n  }, []);\n\n  const onChangeText = useCallback(\n    async (q: string) => {\n      await onRequest({...params, q});\n      setTexting(false);\n      setValue(q);\n    },\n    [onRequest, params],\n  );\n  const onFilter = useCallback(\n    async (_value: any) => {\n      setTexting(true);\n      // await onRequest({..._value, q: value});\n      setTexting(false);\n      setParams(_value);\n    },\n    [onRequest, value],\n  );\n\n  const renderItem = useCallback(\n    (id: number, index?: number) => (\n      <PostThumbnail isInFeed={true} id={id} key={index} />\n    ),\n    [],\n  );\n\n  useEffect(() => {\n    onRequest({\n      q: '',\n    }).then();\n  }, [onRequest]);\n\n  return (\n    <ScreenWrapper>\n      <SHeader style={animatedPaddingTop}>\n        <SSearchView>\n          <MySearchBar\n            isTexting={isTexting}\n            setTexting={setTexting}\n            onSearchTextChange={onChangeText}\n          />\n        </SSearchView>\n        {isFilter ? (\n          <FilterIcon\n            params={params}\n            onPress={() => {\n              navigateToFilterScreen({\n                params,\n                setParams: onFilter,\n              });\n            }}\n          />\n        ) : null}\n        <CancelButton onPress={goBack}>\n          <SCancelText>Cancel</SCancelText>\n        </CancelButton>\n      </SHeader>\n      <View\n        style={{\n          flex: 1,\n          backgroundColor: Colors.neutral6,\n        }}>\n        {!isTexting && !loading && (\n          <RecycleList\n            data={searchUpdatesIds}\n            itemHeight={100}\n            renderItem={renderItem}\n            showsVerticalScrollIndicator={false}\n            contentContainerStyle={{\n              justifyContent: 'center',\n              flex: 1,\n            }}\n            loading={false}\n            isRefreshing={false}\n            isLoadMore={false}\n            error={false}\n            refreshable={false}\n            loadMorable={false}\n            ListHeaderComponent={<View style={{width: '100%', height: 16}} />}\n            // ListFooterComponent={<STextGrey>End of result</STextGrey>}\n            renderEmptyView={() => (\n              <EmptySearchView\n                image={IMAGE_EMPTY_SEARCH}\n                title={'Empty updates in this type'}\n              />\n            )}\n          />\n        )}\n        {(isTexting || loading) && (\n          <>\n            {Array.apply(null, Array(6)).map((item, index) => (\n              <SkeletonPlaceholder key={index} borderRadius={4}>\n                <SkeletonPlaceholder.Item\n                  padding={6}\n                  flexDirection=\"row\"\n                  alignItems=\"center\">\n                  <SkeletonPlaceholder.Item\n                    width={40}\n                    height={40}\n                    borderRadius={7}\n                  />\n                  <SkeletonPlaceholder.Item marginLeft={8}>\n                    <SkeletonPlaceholder.Item\n                      width={Metrics.screen.width * 0.7}\n                      height={20}\n                    />\n                    <SkeletonPlaceholder.Item\n                      width={Metrics.screen.width * 0.4}\n                      height={20}\n                      marginTop={4}\n                    />\n                  </SkeletonPlaceholder.Item>\n                </SkeletonPlaceholder.Item>\n              </SkeletonPlaceholder>\n            ))}\n          </>\n        )}\n      </View>\n    </ScreenWrapper>\n  );\n});\n\nconst SHeader = styled(Animated.View)`\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: -8px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid ${p => p.theme.neutral4};\n  background-color: white;\n`;\nconst SSearchView = styled.View`\n  flex: 1;\n  padding: 8px 16px;\n  border-radius: 8px;\n`;\n\nconst CancelButton = styled.TouchableOpacity`\n  display: flex;\n  padding: 4px 0px;\n  justify-content: center;\n  align-items: center;\n  margin-right: 12px;\n`;\nconst SCancelText = styled.Text`\n  color: ${p => p.theme.neutral2};\n  text-align: center;\n  font-family: ${Fonts.Regular};\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 24px; /* 171.429% */\n`;\n","export const getCountFilter = (params: {[id: string]: any}) => {\n  // const arr = Object.\n  let count = 0;\n  for (let key in params) {\n    if (key !== 'q' && params[key]) count++;\n  }\n  return count;\n};\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_react","obj","nodeInterop","__esModule","default","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","require","_reactNativeFastImage","_interopRequireDefault","_core","_ui","_globalStyle","_Metrics","_asset","_helper","_jsxRuntime","WeakMap","cacheBabelInterop","cacheNodeInterop","exports","memo","_ref","style","image","size","title","subTitle","buttons","jsxs","SContainer","flatStyles","assign","height","Metrics","screen","children","SImageView","jsx","SImage","source","UIText","BodyLarge500","SSubText","STextGrey","SWhiteBox","FlexCenter","SDot","length","UIBottomButton","marginHorizontal","marginTop","_ref2","text","IMAGE_EMPTY_SEARCH","STextBlack","globalStyles","mt16","styled","View","_taggedTemplateLiteralLoose2","FastImage","p","Text","Fonts","Regular","theme","neutral2","grey1","Bold","Medium","neutral5","BodyMedium400","_filter","_excluded","params","rest","_objectWithoutProperties2","SBackBtn","width","alignItems","justifyContent","SBackIc","IC_OUTLINED_FILTER","CountFilterView","count","getCountFilter","TouchableOpacity","attrs","hitSlop","top","bottom","left","right","Image","SCountContainer","SCountText","Colors","white","_reactNativeSafeAreaContext","_reactNativeReanimated","_SearchBar","_function","_useAsyncFn3","_reactNativeSkeletonPlaceholder","_reactNative","_updates","_PostThumbnail","_EmptyView","_FilterIcon","_utils","_worklet_9978501313055_init_data","code","SHeader","anonymous","_ref3","isFilter","useNavigationParams","aTop","useAnimatedSafeAreaInsets","animatedPaddingTop","useAnimatedStyle","paddingTop","value","__closure","__initData","__workletHash","searchUpdatesIds","useUpdatesByQuery","_useState","useState","_useState2","_slicedToArray2","setParams","_useState3","_useState4","isTexting","setTexting","_useState5","_useState6","setValue","_useAsyncFn","useAsyncFn","_asyncToGenerator2","_value","_params","q","requestSearchUpdates","_x","apply","arguments","_useAsyncFn2","loading","onRequest","onChangeText","useCallback","_x2","onFilter","_x3","renderItem","id","index","PostThumbnail","isInFeed","useEffect","then","ScreenWrapper","SSearchView","MySearchBar","onSearchTextChange","FilterIcon","onPress","navigateToFilterScreen","CancelButton","goBack","SCancelText","flex","backgroundColor","neutral6","RecycleList","data","itemHeight","showsVerticalScrollIndicator","contentContainerStyle","isRefreshing","isLoadMore","error","refreshable","loadMorable","ListHeaderComponent","renderEmptyView","EmptySearchView","Fragment","Array","map","item","borderRadius","Item","padding","flexDirection","marginLeft","Animated","neutral4"],"sourceRoot":""}