{"version":3,"file":"src_screens_UpdateTypesScreen_FilteredTypeScreen_tsx.chunk.bundle","mappings":"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","sources":["webpack:///./src/components/EmptyView.tsx","webpack:///./src/screens/UpdateTypesScreen/FilteredTypeScreen.tsx","webpack:///./src/screens/UpdateTypesScreen/typeUpdates.ts"],"sourcesContent":["import React, {memo} from 'react';\nimport FastImage from 'react-native-fast-image';\nimport {\n  ImageRequireSource,\n  TouchableOpacityProps,\n  ViewStyle,\n} from 'react-native';\nimport {styled} from '@true/core';\nimport {Fonts} from '@true/core';\nimport {UIBottomButton, UIText} from '@true/ui';\nimport {globalStyles} from '@/utils/globalStyle';\nimport Metrics from '@/assets/Metrics';\nimport {flatStyles} from '@true/core';\nimport {IMAGE_EMPTY_SEARCH} from '@true/asset';\nimport {FlexCenter} from '@/utils/helper';\n\ninterface EmptySearchProps {\n  style?: ViewStyle;\n  image: ImageRequireSource;\n  size?: number;\n  buttons?: IButton[];\n  title?: string;\n  subTitle?: string;\n}\n\ninterface IButton extends TouchableOpacityProps {\n  title: string;\n  onPress?: () => void;\n  textColor?: string;\n  backgroundColor?: string;\n  loading?: boolean;\n}\n\nexport const EmptySearchView = memo(\n  ({style, image, size, title, subTitle, buttons}: EmptySearchProps) => {\n    return (\n      <SContainer\n        style={flatStyles(style, {\n          height: (Metrics.screen.height * 2) / 3,\n          ...style,\n        })}>\n        <SImageView>\n          <SImage source={image} size={size} />\n          {title && <UIText.BodyLarge500>{title}</UIText.BodyLarge500>}\n          {subTitle && <SSubText>{subTitle}</SSubText>}\n          <STextGrey>Please try again by:</STextGrey>\n          <SWhiteBox>\n            <FlexCenter>\n              <SDot />\n              <STextGrey>Check your spelling</STextGrey>\n            </FlexCenter>\n            <FlexCenter>\n              <SDot />\n              <STextGrey>Try again by other keywords</STextGrey>\n            </FlexCenter>\n            <FlexCenter>\n              <SDot />\n              <STextGrey>Try again with shorter keywords</STextGrey>\n            </FlexCenter>\n            <FlexCenter>\n              <SDot />\n              <STextGrey>Try again with more general keywords </STextGrey>\n            </FlexCenter>\n          </SWhiteBox>\n        </SImageView>\n\n        {buttons && buttons.length > 0 && (\n          <UIBottomButton\n            style={{marginHorizontal: 16, marginTop: 40}}\n            // @ts-ignore\n            buttons={buttons}\n          />\n        )}\n      </SContainer>\n    );\n  },\n);\n\ninterface EmptyViewProps {\n  style?: ViewStyle;\n  image?: ImageRequireSource;\n  size?: number;\n  text?: string;\n}\n\nexport const EmptyView = memo(({image, style, size, text}: EmptyViewProps) => {\n  return (\n    <SContainer style={flatStyles(style)}>\n      <SImage source={image || IMAGE_EMPTY_SEARCH} size={size} />\n      <STextBlack style={globalStyles.mt16}>{text || 'No data'}</STextBlack>\n    </SContainer>\n  );\n});\n\nconst SContainer = styled.View`\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst SImageView = styled.View`\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  width: 100%;\n  padding: 0 16px;\n`;\n\nconst SImage = styled(FastImage)<{size?: number}>`\n  width: ${p => p.size || 120}px;\n  height: ${p => p.size || 120}px;\n`;\n\nconst SSubText = styled.Text`\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n  font-family: ${Fonts.Regular};\n  text-align: center;\n  color: ${p => p.theme.neutral2};\n`;\n\nconst STextBold = styled.Text`\n  color: ${p => p.theme.grey1};\n  font-size: 24px;\n  line-height: 32px;\n  font-family: ${Fonts.Bold};\n  margin-top: 12px;\n  margin-bottom: 4px;\n`;\n\nconst STextBlack = styled(SSubText)`\n  font-size: 16px;\n  line-height: 24px;\n  font-family: ${Fonts.Medium};\n`;\nconst SWhiteBox = styled.View`\n  display: flex;\n  padding: 12px;\n  width: 100%;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  gap: 4px;\n  border-radius: 8px;\n  border: 1px solid ${p => p.theme.neutral5};\n  background-color: #fff;\n`;\nconst SDot = styled.View`\n  background-color: ${p => p.theme.neutral2};\n  width: 4px;\n  height: 4px;\n  border-radius: 2px;\n  margin: 0 8px;\n`;\nconst STextGrey = styled(UIText.BodyMedium400)`\n  color: ${p => p.theme.neutral2};\n`;\n","import React, {memo, useCallback} from 'react';\nimport {ScreenWrapper, UIFlashList} from '@true/ui';\nimport {EOrderUpdate, ETypeUpdate} from '@/store/updates/type';\nimport {styled, useAsyncFn, useNavigationParams} from '@true/core';\nimport {CustomHeader} from '@/components/CustomHeader';\nimport {typeUpdates} from '@/screens/UpdateTypesScreen/typeUpdates';\nimport {useUpdatesByQuery} from '@/store/updates';\nimport {PostThumbnail} from '@/components/PostThumbnail';\nimport {UpdateSkeleton} from '@/components/SkeletonPlaceholder/UpdateSkeleton';\nimport {\n  requestLoadMoreUpdates,\n  requestUpdatePosts,\n} from '@/store/updates/function';\nimport {sleep} from '@/utils/helper';\nimport {useTokenUpdate} from '@/zustand/TokenUpdate';\nimport {EmptyView} from '@/components/EmptyView';\nimport {globalStyles} from '@/utils/globalStyle';\nimport {\n  navigateToCreateCoreValueScreen,\n  navigateToCreateEvent,\n  navigateToCreateLetterScreen,\n  navigateToCreatePollScreen,\n  navigateToCreatePostScreen,\n  navigateToCreateTopicScreen,\n} from '@/utils';\n\nexport interface FilteredTypeScreenParams {\n  type: ETypeUpdate;\n}\n\nexport const FilteredTypeScreen = memo(function FilteredTypeScrenn() {\n  const {type} = useNavigationParams<FilteredTypeScreenParams>();\n  const listUpdatesFiltered = useUpdatesByQuery(type);\n  const ptoken = useTokenUpdate();\n\n  const onCreate = useCallback(() => {\n    switch (type) {\n      case ETypeUpdate.UPDATE:\n      case ETypeUpdate.STYLED:\n      case ETypeUpdate.WELCOME:\n      case ETypeUpdate.IDEA:\n      case ETypeUpdate.ANNOUNCEMENT:\n        return navigateToCreatePostScreen({\n          type: type,\n        });\n      case ETypeUpdate.EVENT:\n        return navigateToCreateEvent({\n          id: -1,\n        });\n      case ETypeUpdate.POLL:\n        return navigateToCreatePollScreen({\n          id: -1,\n        });\n      case ETypeUpdate.TOPIC:\n        return navigateToCreateTopicScreen({\n          id: -1,\n        });\n      case ETypeUpdate.COMPANY_LETTER:\n        return navigateToCreateLetterScreen({\n          id: -1,\n        });\n      case ETypeUpdate.CORE_VALUE:\n        return navigateToCreateCoreValueScreen({\n          id: -1,\n        });\n      default:\n        return null;\n    }\n  }, []);\n  const renderItem = useCallback(({item}: any) => {\n    return <PostThumbnail isInFeed={true} id={item} />;\n  }, []);\n  const [{loading}, refreshHome] = useAsyncFn(async () => {\n    await requestUpdatePosts({order: EOrderUpdate.UPDATE});\n    return;\n  }, []);\n\n  const [{loading: loadingPrev, error: errorPrev}, loadMoreMessage] =\n    useAsyncFn(async () => {\n      await requestLoadMoreUpdates({ptoken});\n      await sleep(0.5);\n      return [];\n    }, [listUpdatesFiltered.length, ptoken]);\n\n  const onEndReached = useCallback(() => {\n    if (loadingPrev) return;\n    // if (errorPrev) return;\n    // if (!messages.length) return;\n    loadMoreMessage().then();\n  }, [loadingPrev, errorPrev, listUpdatesFiltered]);\n  const onLoadData = useCallback(\n    async (isRefreshing: boolean, isLoadMore: boolean) => {\n      if (isLoadMore) {\n        await loadMoreMessage();\n      }\n    },\n    [loadMoreMessage],\n  );\n\n  return (\n    <ScreenWrapper isGrey>\n      <CustomHeader\n        title={typeUpdates[type].title}\n        isSearch={false}\n        onCreate={onCreate}\n        isBack\n        isDivider\n      />\n      <SView style={globalStyles.mt8}>\n        {loading ? (\n          <UpdateSkeleton />\n        ) : (\n          <UIFlashList\n            data={listUpdatesFiltered}\n            renderItem={renderItem}\n            refreshing={loading}\n            onRefresh={refreshHome}\n            onEndReachedThreshold={1}\n            ListEmptyComponent={<EmptyView />}\n            // nestedScrollEnabled={true}\n            // estimatedItemSize={600}\n            removeClippedSubviews={true}\n            onEndReached={onEndReached}\n            onLoadData={onLoadData}\n            loadingMore={loadingPrev}\n            loadMorable\n          />\n        )}\n      </SView>\n    </ScreenWrapper>\n  );\n});\nconst SView = styled.View`\n  flex: 1;\n`;\n","import {\n  IC_FILLED_ANNOUNCEMENT, IC_FILLED_BAR_CHART, IC_FILLED_CORE_VALUE,\n  IC_FILLED_EVENT,\n  IC_FILLED_FEEDS,\n  IC_FILLED_IDEA,\n  IC_FILLED_STAR, IC_FILLED_TEMPLATE,\n  IC_FILLED_TOPIC, IC_FILLED_WELCOME\n} from \"@true/asset\";\nimport { navigateToAnnouncementScreen, navigateToEventScreen, navigateToFilteredTypeScreen } from \"@/utils\";\nimport { ETypeUpdate } from \"@/store/updates/type\";\n\nexport const typeUpdates: {[id: string]: {title: string, icon: any,subTitle:string, onPress: () => void}} = {\n  events:{\n    title: \"Events\",\n    subTitle:'Events taking place in the company or events related to the company',\n    icon: IC_FILLED_EVENT,\n    onPress: navigateToEventScreen\n  },\n  announcement:{\n    title: \"Announcements\",\n    subTitle:'Important announcements, related to policies, regimes, documents',\n    icon: IC_FILLED_ANNOUNCEMENT,\n    onPress:navigateToAnnouncementScreen\n  },\n  update:{\n    title: \"Quick & styled updates\",\n    subTitle:'Quick updates, simple informations and short announcements',\n    icon: IC_FILLED_FEEDS,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.UPDATE\n      })\n    }\n  },\n  idea:{\n    title: \"Ideas\",\n    subTitle:'Ideas are raised want people to discuss. Content is often informal or unofficial',\n    icon: IC_FILLED_IDEA,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.IDEA\n      })\n    }  },\n  topics:{\n    title: \"Topics\",\n    subTitle:'The poster raised the certain topic in the company, gave the opinion and discuss',\n    icon: IC_FILLED_TOPIC,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.TOPIC\n      })\n    }  },\n  polls:{\n    title: \"Polls\",\n    subTitle:'Survey for all employees in the company',\n    icon: IC_FILLED_BAR_CHART,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.POLL\n      })\n    }  },\n  welcome:{\n    title: \"Welcomes\",\n    subTitle:'Welcome new employees',\n    icon: IC_FILLED_WELCOME,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.WELCOME\n      })\n    }  },\n  companyletters:{\n    title: \"Board letters\",\n    subTitle:'Important announcements from the boards',\n    icon: IC_FILLED_STAR,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.COMPANY_LETTER\n      })\n    }\n    },\n  companycorevalues:{\n    title: \"Core value\",\n    subTitle:'Core values of the company',\n    icon: IC_FILLED_CORE_VALUE,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.CORE_VALUE\n      })\n    }  },\n  external:{\n    title: \"Others\",\n    subTitle:'Custom templates',\n    icon: IC_FILLED_TEMPLATE,\n    onPress: () => {\n      navigateToFilteredTypeScreen({\n        type: ETypeUpdate.EXTERNAL\n      })\n    }  },\n}\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_react","obj","nodeInterop","__esModule","default","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","require","_reactNativeFastImage","_interopRequireDefault","_core","_ui","_globalStyle","_Metrics","_asset","_helper","_jsxRuntime","WeakMap","cacheBabelInterop","cacheNodeInterop","exports","memo","_ref","style","image","size","title","subTitle","buttons","jsxs","SContainer","flatStyles","assign","height","Metrics","screen","children","SImageView","jsx","SImage","source","UIText","BodyLarge500","SSubText","STextGrey","SWhiteBox","FlexCenter","SDot","length","UIBottomButton","marginHorizontal","marginTop","_ref2","text","IMAGE_EMPTY_SEARCH","STextBlack","globalStyles","mt16","styled","View","_taggedTemplateLiteralLoose2","FastImage","p","Text","Fonts","Regular","theme","neutral2","grey1","Bold","Medium","neutral5","BodyMedium400","_type","_CustomHeader","_typeUpdates","_updates","_PostThumbnail","_UpdateSkeleton","_function","_TokenUpdate","_EmptyView","_utils","_ref4","type","useNavigationParams","listUpdatesFiltered","useUpdatesByQuery","ptoken","useTokenUpdate","onCreate","useCallback","ETypeUpdate","UPDATE","STYLED","WELCOME","IDEA","ANNOUNCEMENT","navigateToCreatePostScreen","EVENT","navigateToCreateEvent","id","POLL","navigateToCreatePollScreen","TOPIC","navigateToCreateTopicScreen","COMPANY_LETTER","navigateToCreateLetterScreen","CORE_VALUE","navigateToCreateCoreValueScreen","renderItem","item","PostThumbnail","isInFeed","_useAsyncFn","useAsyncFn","_asyncToGenerator2","requestUpdatePosts","order","EOrderUpdate","_useAsyncFn2","_slicedToArray2","loading","refreshHome","_useAsyncFn3","requestLoadMoreUpdates","sleep","_useAsyncFn4","_useAsyncFn4$","loadingPrev","errorPrev","error","loadMoreMessage","onEndReached","then","onLoadData","isRefreshing","isLoadMore","_x","_x2","apply","arguments","ScreenWrapper","isGrey","CustomHeader","typeUpdates","isSearch","isBack","isDivider","SView","mt8","UpdateSkeleton","UIFlashList","data","refreshing","onRefresh","onEndReachedThreshold","ListEmptyComponent","EmptyView","removeClippedSubviews","loadingMore","loadMorable","events","icon","IC_FILLED_EVENT","onPress","navigateToEventScreen","announcement","IC_FILLED_ANNOUNCEMENT","navigateToAnnouncementScreen","update","IC_FILLED_FEEDS","navigateToFilteredTypeScreen","idea","IC_FILLED_IDEA","topics","IC_FILLED_TOPIC","polls","IC_FILLED_BAR_CHART","welcome","IC_FILLED_WELCOME","companyletters","IC_FILLED_STAR","companycorevalues","IC_FILLED_CORE_VALUE","external","IC_FILLED_TEMPLATE","EXTERNAL"],"sourceRoot":""}