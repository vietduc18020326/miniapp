{"version":3,"file":"src_screens_ChannelScreen_index_tsx.chunk.bundle","mappings":"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","sources":["webpack:///./src/components/EmptyView.tsx","webpack:///./src/screens/ChannelScreen/ChannelThumbnail.tsx","webpack:///./src/screens/ChannelScreen/index.tsx"],"sourcesContent":["import React, {memo} from 'react';\nimport FastImage from 'react-native-fast-image';\nimport {\n  ImageRequireSource,\n  TouchableOpacityProps,\n  ViewStyle,\n} from 'react-native';\nimport {styled} from '@true/core';\nimport {Fonts} from '@true/core';\nimport {UIBottomButton, UIText} from '@true/ui';\nimport {globalStyles} from '@/utils/globalStyle';\nimport Metrics from '@/assets/Metrics';\nimport {flatStyles} from '@true/core';\nimport {IMAGE_EMPTY_SEARCH} from '@true/asset';\nimport {FlexCenter} from '@/utils/helper';\n\ninterface EmptySearchProps {\n  style?: ViewStyle;\n  image: ImageRequireSource;\n  size?: number;\n  buttons?: IButton[];\n  title?: string;\n  subTitle?: string;\n}\n\ninterface IButton extends TouchableOpacityProps {\n  title: string;\n  onPress?: () => void;\n  textColor?: string;\n  backgroundColor?: string;\n  loading?: boolean;\n}\n\nexport const EmptySearchView = memo(\n  ({style, image, size, title, subTitle, buttons}: EmptySearchProps) => {\n    return (\n      <SContainer\n        style={flatStyles(style, {\n          height: (Metrics.screen.height * 2) / 3,\n          ...style,\n        })}>\n        <SImageView>\n          <SImage source={image} size={size} />\n          {title && <UIText.BodyLarge500>{title}</UIText.BodyLarge500>}\n          {subTitle && <SSubText>{subTitle}</SSubText>}\n          <STextGrey>Please try again by:</STextGrey>\n          <SWhiteBox>\n            <FlexCenter>\n              <SDot />\n              <STextGrey>Check your spelling</STextGrey>\n            </FlexCenter>\n            <FlexCenter>\n              <SDot />\n              <STextGrey>Try again by other keywords</STextGrey>\n            </FlexCenter>\n            <FlexCenter>\n              <SDot />\n              <STextGrey>Try again with shorter keywords</STextGrey>\n            </FlexCenter>\n            <FlexCenter>\n              <SDot />\n              <STextGrey>Try again with more general keywords </STextGrey>\n            </FlexCenter>\n          </SWhiteBox>\n        </SImageView>\n\n        {buttons && buttons.length > 0 && (\n          <UIBottomButton\n            style={{marginHorizontal: 16, marginTop: 40}}\n            // @ts-ignore\n            buttons={buttons}\n          />\n        )}\n      </SContainer>\n    );\n  },\n);\n\ninterface EmptyViewProps {\n  style?: ViewStyle;\n  image?: ImageRequireSource;\n  size?: number;\n  text?: string;\n}\n\nexport const EmptyView = memo(({image, style, size, text}: EmptyViewProps) => {\n  return (\n    <SContainer style={flatStyles(style)}>\n      <SImage source={image || IMAGE_EMPTY_SEARCH} size={size} />\n      <STextBlack style={globalStyles.mt16}>{text || 'No data'}</STextBlack>\n    </SContainer>\n  );\n});\n\nconst SContainer = styled.View`\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst SImageView = styled.View`\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  width: 100%;\n  padding: 0 16px;\n`;\n\nconst SImage = styled(FastImage)<{size?: number}>`\n  width: ${p => p.size || 120}px;\n  height: ${p => p.size || 120}px;\n`;\n\nconst SSubText = styled.Text`\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n  font-family: ${Fonts.Regular};\n  text-align: center;\n  color: ${p => p.theme.neutral2};\n`;\n\nconst STextBold = styled.Text`\n  color: ${p => p.theme.grey1};\n  font-size: 24px;\n  line-height: 32px;\n  font-family: ${Fonts.Bold};\n  margin-top: 12px;\n  margin-bottom: 4px;\n`;\n\nconst STextBlack = styled(SSubText)`\n  font-size: 16px;\n  line-height: 24px;\n  font-family: ${Fonts.Medium};\n`;\nconst SWhiteBox = styled.View`\n  display: flex;\n  padding: 12px;\n  width: 100%;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  gap: 4px;\n  border-radius: 8px;\n  border: 1px solid ${p => p.theme.neutral5};\n  background-color: #fff;\n`;\nconst SDot = styled.View`\n  background-color: ${p => p.theme.neutral2};\n  width: 4px;\n  height: 4px;\n  border-radius: 2px;\n  margin: 0 8px;\n`;\nconst STextGrey = styled(UIText.BodyMedium400)`\n  color: ${p => p.theme.neutral2};\n`;\n","import {Fonts, getUserByQuery, styled} from '@true/core';\nimport React, {memo, useCallback} from 'react';\nimport {useChannels} from '@/store/channels';\nimport {navigateToDetailChannelScreen} from '@/utils';\nimport FastImage from 'react-native-fast-image';\nimport {globalStyles} from '@/utils/globalStyle';\nimport {Dimensions, View} from 'react-native';\nimport {IC_OUTLINED_PUBLIC} from '@true/asset';\nimport {IMAGE_THUMBNAIL_CHANNEL} from '@true/asset';\n\ninterface ChannelThumbnailProps {\n  id: number;\n}\n\nexport const ChannelThumbnail = memo(function (props: ChannelThumbnailProps) {\n  const {id} = props;\n  const channel = useChannels(id);\n  const onPress = useCallback(() => {\n    navigateToDetailChannelScreen({\n      id: id,\n      path: channel?.path || '',\n    });\n  }, []);\n\n  return (\n    <SContainer onPress={onPress}>\n      <SCoverImage\n        source={\n          channel?.image ? {uri: channel?.image} : IMAGE_THUMBNAIL_CHANNEL\n        }\n        resizeMode={'cover'}\n      />\n      <SIconChannel>\n        <SImage source={IC_OUTLINED_PUBLIC} />\n      </SIconChannel>\n      <SWrapperView>\n        <View>\n          <STextTitle numberOfLines={2} style={globalStyles.mt4}>\n            {channel?.name}\n          </STextTitle>\n          <STextGrey style={globalStyles.mt4}>\n            {channel?.metatype === 'company' ? 'Company-wide' : 'Group'}\n          </STextGrey>\n        </View>\n        <STextGreyBold style={globalStyles.mt8}>\n          {channel?.metatype === 'company'\n            ? getUserByQuery('allIds').length\n            : channel?.followers.length}{' '}\n          members\n        </STextGreyBold>\n      </SWrapperView>\n    </SContainer>\n  );\n});\nconst widthScreen = Dimensions.get('window').width;\nconst SContainer = styled.TouchableOpacity`\n  background-color: white;\n  border-radius: 8px;\n  align-items: center;\n  margin-top: 8px;\n  width: ${(widthScreen - 16) / 2 - 16}px;\n  padding-bottom: 8px;\n  border: 1px solid ${p => p.theme.neutral5};\n  height: 210px;\n`;\nconst SCoverImage = styled(FastImage)`\n  width: 100%;\n  height: 100px;\n  max-height: 100px;\n  border-top-right-radius: 8px;\n  border-top-left-radius: 8px;\n  background-color: #1c1ca3;\n`;\nconst SWrapperView = styled.View`\n  flex: 1;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst STextTitle = styled.Text`\n  color: ${p => p.theme.neutral1};\n  text-align: center;\n  font-family: ${Fonts.Regular};\n  font-size: 16px;\n\n  font-weight: 500;\n  width: 149px;\n  line-height: 24px; /* 150% */\n`;\nconst STextGrey = styled.Text`\n  color: ${p => p.theme.neutral2};\n  font-family: ${Fonts.Regular};\n  font-size: 12px;\n\n  font-weight: 400;\n  line-height: 16px; /* 133.333% */\n  text-align: center;\n`;\nconst STextGreyBold = styled(STextGrey)`\n  font-weight: 500;\n`;\nconst SIconChannel = styled.View`\n  width: 40px;\n  height: 40px;\n  background-color: ${p => p.theme.primaryColor};\n  border-radius: 8px;\n  border: 2.22222px solid #ffffff;\n  margin-top: -32px;\n  align-items: center;\n  justify-content: center;\n`;\nconst SImage = styled.Image`\n  width: 24px;\n  height: 24px;\n  tint-color: #fff;\n`;\n","import {ScreenWrapper, ScrollableTabView, UIFlashList} from '@true/ui';\nimport React, {memo, useCallback, useMemo, useState} from 'react';\nimport {ChannelThumbnail} from '@/screens/ChannelScreen/ChannelThumbnail';\nimport {\n  requestAllChannels,\n  requestJoinedChannels,\n} from '@/store/channels/function';\nimport {\n  getChannels,\n  getChannelsByQuery,\n  useChannelsByQuery,\n} from '@/store/channels';\nimport {normalizeStringForSearch, styled, useMe} from '@true/core';\nimport {EUserRole} from '@/utils/helper';\nimport {CustomHeader} from '@/components/CustomHeader';\nimport {navigateToCreateChannelScreen} from '@/utils';\nimport {IFilterParams} from '@/screens/SearchScreen/type';\nimport {EmptySearchView} from '@/components/EmptyView';\nimport {IMAGE_EMPTY_SEARCH} from '@true/asset';\n\nexport const ChannelScreen = memo(function () {\n  const me = useMe();\n  const [params, setParams] = useState<IFilterParams>({});\n  const [search, setSearch] = useState('');\n  const renderItem = useCallback(\n    (item: any, index?: number, isLast?: boolean) => {\n      return <ChannelThumbnail id={item} />;\n    },\n    [],\n  );\n  const renderItemFlashList = useCallback(({item}: any) => {\n    return <ChannelThumbnail id={item} />;\n  }, []);\n\n  const onChangeText = useCallback(\n    async (q: string) => {\n      setSearch(q);\n    },\n    [params],\n  );\n\n  const onSetData = useCallback(\n    (prevData: string[]) => {\n      return (prevData || []).filter(item =>\n        normalizeStringForSearch(\n          getChannels(item as string)?.name || '',\n        ).includes(search),\n      );\n    },\n    [search],\n  );\n  const channelIds = useMemo(() => {\n    const ids = getChannelsByQuery('all') || [];\n    return onSetData(ids);\n  }, [search, onSetData]);\n  const renderContent = useMemo(() => {\n    if (me && Number(me.role) === EUserRole.ADMIN) {\n      return (\n        <ScrollableTabView.Provider\n          params={{}}\n          renderItem={renderItem}\n          getItemByQuery={getChannelsByQuery}\n          useItemByQuery={useChannelsByQuery}\n          tabs={[\n            {\n              title: 'Joined channels',\n              content: (p: any) => (\n                <ScrollableTabView.List\n                  {...p}\n                  itemHeight={210}\n                  requestFn={requestJoinedChannels}\n                  tab={'joined'}\n                  numColumns={2}\n                  setData={onSetData}\n                />\n              ),\n            },\n            {\n              title: 'All channels',\n              content: (p: any) => (\n                <ScrollableTabView.List\n                  {...p}\n                  itemHeight={210}\n                  requestFn={requestAllChannels}\n                  numColumns={2}\n                  setData={onSetData}\n                />\n              ),\n            },\n          ]}>\n          <ScrollableTabView.TabBar />\n          <SContentWrapper>\n            <ScrollableTabView.Content />\n          </SContentWrapper>\n        </ScrollableTabView.Provider>\n      );\n    } else\n      return (\n        <SContentWrapper>\n          <UIFlashList\n            data={channelIds}\n            renderItem={renderItemFlashList}\n            numColumns={2}\n            estimatedItemSize={210}\n            ListEmptyComponent={\n              <EmptySearchView\n                title={'No channel was found'}\n                image={IMAGE_EMPTY_SEARCH}\n              />\n            }\n          />\n        </SContentWrapper>\n      );\n  }, [me, search, channelIds, renderItem, renderItemFlashList]);\n\n  return (\n    <ScreenWrapper isGrey={false}>\n      <CustomHeader\n        onCreate={navigateToCreateChannelScreen}\n        title={'Channel'}\n        isSearch\n        onChangeText={onChangeText}\n      />\n      {renderContent}\n    </ScreenWrapper>\n  );\n});\nconst SContentWrapper = styled.View`\n  flex: 1;\n  margin-left: 12px;\n`;\nexport default ChannelScreen;\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_react","obj","nodeInterop","__esModule","default","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","require","_reactNativeFastImage","_interopRequireDefault","_core","_ui","_globalStyle","_Metrics","_asset","_helper","_jsxRuntime","WeakMap","cacheBabelInterop","cacheNodeInterop","EmptySearchView","memo","_ref","style","image","size","title","subTitle","buttons","jsxs","SContainer","flatStyles","assign","height","Metrics","screen","children","SImageView","jsx","SImage","source","UIText","BodyLarge500","SSubText","STextGrey","SWhiteBox","FlexCenter","SDot","length","UIBottomButton","marginHorizontal","marginTop","exports","EmptyView","_ref2","text","IMAGE_EMPTY_SEARCH","STextBlack","globalStyles","mt16","styled","View","_taggedTemplateLiteralLoose2","FastImage","p","Text","Fonts","Regular","theme","neutral2","grey1","Bold","Medium","neutral5","BodyMedium400","_channels","_utils","_reactNative","ChannelThumbnail","props","id","channel","useChannels","onPress","useCallback","navigateToDetailChannelScreen","path","SCoverImage","uri","IMAGE_THUMBNAIL_CHANNEL","resizeMode","SIconChannel","IC_OUTLINED_PUBLIC","SWrapperView","STextTitle","numberOfLines","mt4","name","metatype","STextGreyBold","mt8","getUserByQuery","followers","widthScreen","Dimensions","width","TouchableOpacity","neutral1","primaryColor","Image","_ChannelThumbnail","_function","_CustomHeader","_EmptyView","ChannelScreen","me","useMe","_useState","useState","_useState2","_slicedToArray2","params","_useState3","_useState4","search","setSearch","renderItem","item","index","isLast","renderItemFlashList","onChangeText","_x","_asyncToGenerator2","q","apply","arguments","onSetData","prevData","filter","_getChannels","normalizeStringForSearch","getChannels","includes","channelIds","useMemo","ids","getChannelsByQuery","renderContent","Number","role","EUserRole","ADMIN","ScrollableTabView","Provider","getItemByQuery","useItemByQuery","useChannelsByQuery","tabs","content","List","itemHeight","requestFn","requestJoinedChannels","tab","numColumns","setData","requestAllChannels","TabBar","SContentWrapper","Content","UIFlashList","data","estimatedItemSize","ListEmptyComponent","ScreenWrapper","isGrey","CustomHeader","onCreate","navigateToCreateChannelScreen","isSearch","_default"],"sourceRoot":""}