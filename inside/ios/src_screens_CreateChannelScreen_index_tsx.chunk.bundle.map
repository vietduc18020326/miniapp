{"version":3,"file":"src_screens_CreateChannelScreen_index_tsx.chunk.bundle","mappings":"kOAmBiDA,EAAAC,E,4BAnBjDC,EAAAC,EAAA,OASAC,EAAAD,EAAA,OACAE,EAAAF,EAAA,MACAG,EAQiD,SAAAC,EAAAC,GAAA,IAAAA,GAAAD,GAAAA,EAAAE,WAAA,OAAAF,EAAA,UAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,OAAAG,QAAAH,GAAA,IAAAI,EAAAC,EAAAJ,GAAA,GAAAG,GAAAA,EAAAE,IAAAN,GAAA,OAAAI,EAAAG,IAAAP,GAAA,IAAAQ,EAAA,GAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,QAAAC,KAAAb,EAAA,eAAAa,GAAAH,OAAAI,UAAAC,eAAAC,KAAAhB,EAAAa,GAAA,KAAAI,EAAAR,EAAAC,OAAAE,yBAAAZ,EAAAa,GAAA,KAAAI,IAAAA,EAAAV,KAAAU,EAAAC,KAAAR,OAAAC,eAAAH,EAAAK,EAAAI,GAAAT,EAAAK,GAAAb,EAAAa,EAAA,CAAAL,EAAAL,QAAAH,EAAAI,GAAAA,EAAAc,IAAAlB,EAAAQ,GAAA,OAAAA,CAAA,CARjDW,CAAAvB,EAAA,QACAwB,EAAAxB,EAAA,OACAyB,EAAAzB,EAAA,OAKA0B,EAAA1B,EAAA,OACA2B,EAAA3B,EAAA,MAAiD4B,EAAA5B,EAAA,gBAAAS,EAAAJ,GAAA,sBAAAwB,QAAA,gBAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAAA,OAAApB,EAAA,SAAAJ,GAAA,OAAAA,EAAA0B,EAAAD,CAAA,GAAAzB,EAAA,KAAA2B,EAAA,CAAAC,KAAA,8GAAAC,SAAA,kEAAAC,UAAA,6UAAAC,QAAA,SA0G3CC,GAxG0BC,EAAAA,qBAAG,EAAAC,EAAAA,OAAK,WACtC,IAAMC,GAAS,EAAAC,EAAAA,gBAA+BC,EAAAA,mBAExCC,EAAqB,CACzB,CACEC,MAAO,uBACPC,MAAOC,EAAAA,aAAaC,SAEtB,CACEH,MAAO,qBACPC,MAAOC,EAAAA,aAAaE,OAGlBC,GAAgB,EAAAC,EAAAA,cACpB,SAACjC,EAAa4B,GACL,IAAAM,EAAAC,GAAP,EAAAC,EAAAA,UAAOF,EAAA,KAAAG,EAAAA,EAAAC,OAAA,QAAAH,EAAA,SAAEI,EAAcC,GAGrBjB,EAAOK,MAAK/B,OAAA4C,OAAA,GACPlB,EAAOK,OAAM,EAADc,EAAApD,SAAA,GACdiD,EAAOC,GAEZ,GAACG,UAAA,CAAApB,OAzCAA,GAAMY,EAAAS,WAAA7B,EAAAoB,EAAAU,cAAA,aAAAV,EAAAW,eAAAZ,EAAAC,GAkCP,CAOGnC,EAAK4B,EACV,GACA,CAACL,IAGH,OACE,EAAAZ,EAAAoC,KAACjE,EAAAkE,kBAAiB,CAAAC,UAChB,EAAAtC,EAAAuC,MAACpE,EAAAqE,uBAAsB,CAAAF,SAAA,EACrB,EAAAtC,EAAAoC,KAACtC,EAAA2C,iBAAgB,CACfC,SAAS,EACTC,QAAS,WACPC,QAAQC,IAAI,MACd,EACAC,UAAU,EACVC,KAAMC,EAAAA,YAAYC,cAEpB,EAAAjD,EAAAuC,MAAC9B,EAAU,CAAA6B,SAAA,EACP,EAAAtC,EAAAoC,KAACc,EAAa,CAAAZ,UACZ,EAAAtC,EAAAoC,KAACjE,EAAAgF,QAAQC,KAAI,CACXC,MAAO,eACPC,QAAS,OACT1C,OAAQA,EACR2C,YAAa,MACblC,cAAeA,EACfmC,UAAQ,OAGZ,EAAAxD,EAAAoC,KAACc,EAAa,CAAAZ,UACZ,EAAAtC,EAAAoC,KAACjE,EAAAgF,QAAQC,KAAI,CACXC,MAAO,eACPC,QAAS,OACT1C,OAAQA,EACR2C,YAAa,MACblC,cAAeA,EACfmC,UAAU,OAGd,EAAAxD,EAAAoC,KAACc,EAAa,CAAAZ,UACZ,EAAAtC,EAAAoC,KAACjE,EAAAgF,QAAQM,SAAQ,CACfJ,MAAO,eACPC,QAAS,WACTC,YAAa,MACblC,cAAeA,EACfqC,QAAS3C,EACTyC,UAAQ,OAGZ,EAAAxD,EAAAoC,KAACc,EAAa,CAAAZ,UACZ,EAAAtC,EAAAoC,KAACjE,EAAAgF,QAAQQ,WAAU,CACjBN,MAAO,iBACPN,KAAM,OACNO,QAAS,SACTjC,cAAeA,EACfuC,UAAQ,OAGZ,EAAA5D,EAAAoC,KAACc,EAAa,CAAAZ,UACZ,EAAAtC,EAAAoC,KAACjE,EAAAgF,QAAQQ,WAAU,CACjBN,MAAO,kBACPN,KAAM,OACNnC,OAAQA,EACR0C,QAAS,YACTjC,cAAeA,EACfuC,UAAQ,OAGZ,EAAA5D,EAAAoC,KAACc,EAAa,CAAAZ,UACZ,EAAAtC,EAAAoC,KAACjE,EAAAgF,QAAQC,KAAI,CACXC,MAAO,oBACPC,QAAS,UACTC,YAAa,MACb3C,OAAQA,EACRS,cAAeA,EACfmC,UAAQ,OAGZ,EAAAxD,EAAAoC,KAACxC,EAAAiE,oBAAmB,WAKhC,KACmB,EAAAC,EAAAA,QAAOC,EAAAA,QAASC,KAAhB,CAAqB/F,IAAAA,GAAA,EAAAgG,EAAAtF,SAAA,uBAGlCuE,EAAgBY,EAAAA,OAAOE,KAAI9F,IAAAA,GAAA,EAAA+F,EAAAtF,SAAA,qC,sHCrHAV,EAAAC,E,cAXjCG,EAAAD,EAAA,OACA8F,EAAA9F,EAAA,OACAE,EAAAF,EAAA,MACA+F,EAAA/F,EAAA,OACAD,EAAAC,EAAA,OACAgG,EAAAhG,EAAA,OACAG,EAKiC,SAAAC,EAAAC,GAAA,IAAAA,GAAAD,GAAAA,EAAAE,WAAA,OAAAF,EAAA,UAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,OAAAG,QAAAH,GAAA,IAAAI,EAAAC,EAAAJ,GAAA,GAAAG,GAAAA,EAAAE,IAAAN,GAAA,OAAAI,EAAAG,IAAAP,GAAA,IAAAQ,EAAA,GAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,QAAAC,KAAAb,EAAA,eAAAa,GAAAH,OAAAI,UAAAC,eAAAC,KAAAhB,EAAAa,GAAA,KAAAI,EAAAR,EAAAC,OAAAE,yBAAAZ,EAAAa,GAAA,KAAAI,IAAAA,EAAAV,KAAAU,EAAAC,KAAAR,OAAAC,eAAAH,EAAAK,EAAAI,GAAAT,EAAAK,GAAAb,EAAAa,EAAA,CAAAL,EAAAL,QAAAH,EAAAI,GAAAA,EAAAc,IAAAlB,EAAAQ,GAAA,OAAAA,CAAA,CALjCW,CAAAvB,EAAA,QAKiC4B,EAAA5B,EAAA,gBAAAS,EAAAJ,GAAA,sBAAAwB,QAAA,gBAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAAA,OAAApB,EAAA,SAAAJ,GAAA,OAAAA,EAAA0B,EAAAD,CAAA,GAAAzB,EAAA,KAAA4F,EAAA,CAAAhE,KAAA,kFAAAC,SAAA,0EAAAC,UAAA,sQAAAC,QAAA,SAAA8D,EAAA,CAAAjE,KAAA,+LAAAC,SAAA,0EAAAC,UAAA,kgBAAAC,QAAA,SAAA+D,EAAA,CAAAlE,KAAA,uGAAAC,SAAA,0EAAAC,UAAA,+SAAAC,QAAA,SAwD3BgE,GA7CuB9D,EAAAA,kBAAG,EAAAC,EAAAA,OAAK,SAAU8D,GAC7C,IAC2ClD,EAAAC,EADpCkD,GAAQ,EAAAC,EAAAA,6BAARD,KACDE,GAAqB,EAAAC,EAAAA,mBAAgBtD,EAAA,KAAAG,EAAAA,EAAAC,OAAA,QAAAH,EAAC,iBAAO,CACjDsD,WAAYJ,EAAKzD,MAClB,GAACe,UAAA,CAAA0C,KAzBUA,GAAIlD,EAAAS,WAAAoC,EAAA7C,EAAAU,cAAA,cAAAV,EAAAW,eAAAZ,EAAAC,IA0BVuD,GAAQ,EAAAC,EAAAA,YACP3B,EAAiDoB,EAAjDpB,MAAO4B,EAA0CR,EAA1CQ,OAAQC,EAAkCT,EAAlCS,GAAIvC,EAA8B8B,EAA9B9B,QAAkBwC,GAAYV,EAArB/B,QAAqB+B,EAAZU,UAEtCC,GAAmB,EAAAP,EAAAA,kBAAgB,eAAAtD,EAAA,KAAAG,EAAAA,EAAAC,OAAA,OAAAH,EAAA,WACvC,MAAO,CACL6D,iBAAiB,EAAAC,EAAAA,kBACfL,EAAOhE,MAAQ,EAAI,EACnB,CAAC,EAAG,GACJ,CAAC8D,EAAMQ,SAAUR,EAAMS,eAEzBC,MAAO,OAEX,EArCwF,OAqCvFjE,EAAAQ,UAAA,CAAAsD,iBArCkBA,EAAAA,iBAAgBL,OAACA,EAAMF,MAAyCA,GAAKvD,EAAAS,WAAAqC,EAAA9C,EAAAU,cAAA,cAAAV,EAAAW,eAAAZ,EAAAC,CAAA,CA4B/C,GAStC,CAACuD,IAEEW,GAAgB,EAAAC,EAAAA,kBAAgB,eAAApE,EAAA,KAAAG,EAAAA,EAAAC,OAAA,OAAAH,EAAA,WACpC,MAAO,CACLoE,cAAeX,EAAOhE,MAAQ,OAAS,OAE3C,EA3CuB,OA2CtBO,EAAAQ,UAAA,CAAAiD,OA3CgBA,GAAMzD,EAAAS,WAAAsC,EAAA/C,EAAAU,cAAA,cAAAV,EAAAW,eAAAZ,EAAAC,CAAA,CAuCe,IAOtC,OACE,EAAAxB,EAAAuC,MAACiC,EAAa,CAACqB,MAAOjB,EAAmBtC,SAAA,EACvC,EAAAtC,EAAAuC,MAAC2B,EAAA4B,WAAU,CAACC,IAAK,EAAEzD,SAAA,EACjB,EAAAtC,EAAAoC,KAACjE,EAAA6H,SAAQ,CACPC,OAAQC,EAAAA,iBACRvD,QAASwC,GAAsBgB,EAAAA,UAEjC,EAAAnG,EAAAoC,KAACjE,EAAAiI,OAAOC,YAAW,CAAA/D,SAAEe,QAEvB,EAAArD,EAAAoC,KAAC7D,EAAAI,QAASqF,KAAI,CAAC0B,cAAeA,EAAqBpD,UACjD,EAAAtC,EAAAoC,KAACkE,EAAU,CACTjD,MAAO6B,EAAK,SAAW,SACvBvC,QAASA,EACTkD,MAAOT,QAKjB,KACsB,EAAAtB,EAAAA,QAAOC,EAAAA,QAASC,KAAhB,CAAqB/F,IAAAA,GAAA,EAAAgG,EAAAtF,SAAA,yMAIlB,SAAA4H,GAAC,OAAIA,EAAExB,MAAMyB,QAAQ,KAMxCF,GAAa,EAAAxC,EAAAA,QAAOkC,EAAAA,UAAUS,OAAM,SAAAF,GAAC,MAAK,CAC9CG,UAASxH,OAAA4C,OAAA,GACJ6E,EAAAA,YAAYC,gBAAgB,CAC/BC,MAAO,SAEV,GALkB,CAKhB3I,IAAAA,GAAA,EAAA+F,EAAAtF,SAAA,sKAOmB,SAAA4H,GAAC,OAAIA,EAAExB,MAAMS,YAAY,G","sources":["webpack:///./src/screens/CreateChannelScreen/index.tsx","webpack:///./src/screens/CreatePostScreen/HeaderCreatePost.tsx"],"sourcesContent":["import {\n  FormScroll,\n  FullScreenWrapper,\n  MyKeyboardAvoidingView,\n  MySelectorInput,\n  MyTextInput,\n  MyUserPickerInput,\n  ScreenWrapper, UIInput\n} from \"@true/ui\";\nimport {memo, useCallback} from 'react';\nimport {Fonts, styled} from '@true/core';\nimport Animated, {runOnUI, useSharedValue} from 'react-native-reanimated';\nimport {AnimatedBottomSpace} from '@/components/AnimatedBottomSpace';\nimport {\n  ETypeChannel,\n  ICreateChannel,\n  initCreateChannel,\n} from '@/store/channels/type';\nimport {HeaderCreatePost} from '@/screens/CreatePostScreen/HeaderCreatePost';\nimport {ETypeUpdate} from '@/store/updates/type';\n\nexport const CreateChannelScreen = memo(function () {\n  const params = useSharedValue<ICreateChannel>(initCreateChannel);\n\n  const typeChannelOptions = [\n    {\n      label: 'Public, Company-wide',\n      value: ETypeChannel.COMPANY,\n    },\n    {\n      label: 'Team or department',\n      value: ETypeChannel.TEAM,\n    },\n  ];\n  const onChangeValue = useCallback(\n    (key: string, value: any) => {\n      runOnUI((_key: string, _value) => {\n        'worklet';\n\n        params.value = {\n          ...params.value,\n          [_key]: _value,\n        };\n      })(key, value);\n    },\n    [params],\n  );\n\n  return (\n    <FullScreenWrapper>\n      <MyKeyboardAvoidingView>\n        <HeaderCreatePost\n          loading={false}\n          onPress={() => {\n            console.log('aaa');\n          }}\n          isActive={false}\n          type={ETypeUpdate.CORE_VALUE}\n        />\n        <SContainer>\n            <SWrapperInput>\n              <UIInput.Text\n                title={'Channel name'}\n                keyName={'name'}\n                params={params}\n                placeholder={'---'}\n                onChangeValue={onChangeValue}\n                required\n              />\n            </SWrapperInput>\n            <SWrapperInput>\n              <UIInput.Text\n                title={'Channel path'}\n                keyName={'path'}\n                params={params}\n                placeholder={'---'}\n                onChangeValue={onChangeValue}\n                required={true}\n              />\n            </SWrapperInput>\n            <SWrapperInput>\n              <UIInput.Selector\n                title={'Channel type'}\n                keyName={'metatype'}\n                placeholder={'---'}\n                onChangeValue={onChangeValue}\n                options={typeChannelOptions}\n                required\n              />\n            </SWrapperInput>\n            <SWrapperInput>\n              <UIInput.UserPicker\n                title={'Channel admins'}\n                type={'user'}\n                keyName={'owners'}\n                onChangeValue={onChangeValue}\n                multiple\n              />\n            </SWrapperInput>\n            <SWrapperInput>\n              <UIInput.UserPicker\n                title={'Channel members'}\n                type={'user'}\n                params={params}\n                keyName={'followers'}\n                onChangeValue={onChangeValue}\n                multiple\n              />\n            </SWrapperInput>\n            <SWrapperInput>\n              <UIInput.Text\n                title={'Short description'}\n                keyName={'content'}\n                placeholder={'---'}\n                params={params}\n                onChangeValue={onChangeValue}\n                required\n              />\n            </SWrapperInput>\n            <AnimatedBottomSpace />\n        </SContainer>\n      </MyKeyboardAvoidingView>\n    </FullScreenWrapper>\n  );\n});\nconst SContainer = styled(Animated.View)`\n  flex: 1;\n`;\nconst SWrapperInput = styled.View`\n  margin: 8px 16px 0 16px;\n`;\n","import {memo} from 'react';\nimport {FlexCenter} from '@/utils/helper';\nimport {goBack, styled, useTheme} from '@true/core';\nimport {IC_OUTLINED_LEFT} from '@true/asset';\nimport {UIButton, UIText, UITextStyle} from '@true/ui';\nimport {useAnimatedSafeAreaInsets} from 'react-native-safe-area-context';\nimport Animated, {\n  interpolateColor,\n  SharedValue,\n  useAnimatedProps,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\ninterface HeaderCreatePostProps {\n  active: SharedValue<boolean>;\n  onPress: () => void;\n  loading: boolean;\n  id?: number;\n  onGoBack?: () => void;\n  title: string;\n}\n\nexport const HeaderCreatePost = memo(function (props: HeaderCreatePostProps) {\n  const {aTop} = useAnimatedSafeAreaInsets();\n  const animatedPaddingTop = useAnimatedStyle(() => ({\n    paddingTop: aTop.value,\n  }));\n  const theme = useTheme();\n  const {title, active, id, onPress, loading, onGoBack} = props;\n\n  const animatedBtnStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: interpolateColor(\n        active.value ? 1 : 0,\n        [0, 1],\n        [theme.neutral3, theme.primaryColor],\n      ),\n      width: '100%',\n    };\n  }, [theme]);\n\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      pointerEvents: active.value ? 'auto' : 'none',\n    };\n  });\n\n  // useAutoToastError(createError);\n  return (\n    <HeaderWrapper style={animatedPaddingTop}>\n      <FlexCenter gap={8}>\n        <UIButton\n          source={IC_OUTLINED_LEFT}\n          onPress={onGoBack ? onGoBack : goBack}\n        />\n        <UIText.HeaderLarge>{title}</UIText.HeaderLarge>\n      </FlexCenter>\n      <Animated.View animatedProps={animatedProps as any}>\n        <SCreateBtn\n          title={id ? 'Update' : 'Create'}\n          onPress={onPress}\n          style={animatedBtnStyle}\n        />\n      </Animated.View>\n    </HeaderWrapper>\n  );\n});\nconst HeaderWrapper = styled(Animated.View)`\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  border-bottom-color: ${p => p.theme.neutral4};\n  border-bottom-width: 1px;\n  padding: 6px 16px;\n  background-color: white;\n`;\n\nconst SCreateBtn = styled(UIButton).attrs(p => ({\n  textStyle: {\n    ...UITextStyle.body_medium_500,\n    color: '#fff',\n  },\n}))`\n  width: 94px;\n  height: 32px;\n  border-radius: 8px;\n  align-items: center;\n  justify-content: center;\n  padding: 4px 16px;\n  background-color: ${p => p.theme.primaryColor};\n`;\n"],"names":["_templateObject","_templateObject2","_ui","require","_react","_core","_reactNativeReanimated","obj","nodeInterop","__esModule","default","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","_AnimatedBottomSpace","_type","_HeaderCreatePost","_type2","_jsxRuntime","WeakMap","cacheBabelInterop","cacheNodeInterop","_worklet_690685769123_init_data","code","location","sourceMap","version","SContainer","exports","memo","params","useSharedValue","initCreateChannel","typeChannelOptions","label","value","ETypeChannel","COMPANY","TEAM","onChangeValue","useCallback","_e","anonymous","runOnUI","global","Error","_key","_value","assign","_defineProperty2","__closure","__initData","__workletHash","__stackDetails","jsx","FullScreenWrapper","children","jsxs","MyKeyboardAvoidingView","HeaderCreatePost","loading","onPress","console","log","isActive","type","ETypeUpdate","CORE_VALUE","SWrapperInput","UIInput","Text","title","keyName","placeholder","required","Selector","options","UserPicker","multiple","AnimatedBottomSpace","styled","Animated","View","_taggedTemplateLiteralLoose2","_helper","_asset","_reactNativeSafeAreaContext","_worklet_9978501313055_init_data","_worklet_16470896921808_init_data","_worklet_14091630795489_init_data","HeaderWrapper","props","aTop","useAnimatedSafeAreaInsets","animatedPaddingTop","useAnimatedStyle","paddingTop","theme","useTheme","active","id","onGoBack","animatedBtnStyle","backgroundColor","interpolateColor","neutral3","primaryColor","width","animatedProps","useAnimatedProps","pointerEvents","style","FlexCenter","gap","UIButton","source","IC_OUTLINED_LEFT","goBack","UIText","HeaderLarge","SCreateBtn","p","neutral4","attrs","textStyle","UITextStyle","body_medium_500","color"],"sourceRoot":""}