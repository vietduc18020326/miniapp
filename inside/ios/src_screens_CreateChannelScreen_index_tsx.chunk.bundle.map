{"version":3,"file":"src_screens_CreateChannelScreen_index_tsx.chunk.bundle","mappings":"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","sources":["webpack:///./src/screens/CreateChannelScreen/index.tsx","webpack:///./src/screens/CreatePostScreen/HeaderCreatePost.tsx"],"sourcesContent":["import {\n  FormScroll,\n  FullScreenWrapper,\n  MyKeyboardAvoidingView,\n  MySelectorInput,\n  MyTextInput,\n  MyUserPickerInput,\n  ScreenWrapper, UIInput\n} from \"@true/ui\";\nimport {memo, useCallback} from 'react';\nimport {Fonts, styled} from '@true/core';\nimport Animated, {runOnUI, useSharedValue} from 'react-native-reanimated';\nimport {AnimatedBottomSpace} from '@/components/AnimatedBottomSpace';\nimport {\n  ETypeChannel,\n  ICreateChannel,\n  initCreateChannel,\n} from '@/store/channels/type';\nimport {HeaderCreatePost} from '@/screens/CreatePostScreen/HeaderCreatePost';\nimport {ETypeUpdate} from '@/store/updates/type';\n\nexport const CreateChannelScreen = memo(function () {\n  const params = useSharedValue<ICreateChannel>(initCreateChannel);\n\n  const typeChannelOptions = [\n    {\n      label: 'Public, Company-wide',\n      value: ETypeChannel.COMPANY,\n    },\n    {\n      label: 'Team or department',\n      value: ETypeChannel.TEAM,\n    },\n  ];\n  const onChangeValue = useCallback(\n    (key: string, value: any) => {\n      runOnUI((_key: string, _value) => {\n        'worklet';\n\n        params.value = {\n          ...params.value,\n          [_key]: _value,\n        };\n      })(key, value);\n    },\n    [params],\n  );\n\n  return (\n    <FullScreenWrapper>\n      <MyKeyboardAvoidingView>\n        <HeaderCreatePost\n          loading={false}\n          onPress={() => {\n            console.log('aaa');\n          }}\n          isActive={false}\n          type={ETypeUpdate.CORE_VALUE}\n        />\n        <SContainer>\n            <SWrapperInput>\n              <UIInput.Text\n                title={'Channel name'}\n                keyName={'name'}\n                params={params}\n                placeholder={'---'}\n                onChangeValue={onChangeValue}\n                required\n              />\n            </SWrapperInput>\n            <SWrapperInput>\n              <UIInput.Text\n                title={'Channel path'}\n                keyName={'path'}\n                params={params}\n                placeholder={'---'}\n                onChangeValue={onChangeValue}\n                required={true}\n              />\n            </SWrapperInput>\n            <SWrapperInput>\n              <UIInput.Selector\n                title={'Channel type'}\n                keyName={'metatype'}\n                placeholder={'---'}\n                onChangeValue={onChangeValue}\n                options={typeChannelOptions}\n                required\n              />\n            </SWrapperInput>\n            <SWrapperInput>\n              <UIInput.UserPicker\n                title={'Channel admins'}\n                type={'user'}\n                keyName={'owners'}\n                onChangeValue={onChangeValue}\n                multiple\n              />\n            </SWrapperInput>\n            <SWrapperInput>\n              <UIInput.UserPicker\n                title={'Channel members'}\n                type={'user'}\n                params={params}\n                keyName={'followers'}\n                onChangeValue={onChangeValue}\n                multiple\n              />\n            </SWrapperInput>\n            <SWrapperInput>\n              <UIInput.Text\n                title={'Short description'}\n                keyName={'content'}\n                placeholder={'---'}\n                params={params}\n                onChangeValue={onChangeValue}\n                required\n              />\n            </SWrapperInput>\n            <AnimatedBottomSpace />\n        </SContainer>\n      </MyKeyboardAvoidingView>\n    </FullScreenWrapper>\n  );\n});\nconst SContainer = styled(Animated.View)`\n  flex: 1;\n`;\nconst SWrapperInput = styled.View`\n  margin: 8px 16px 0 16px;\n`;\n","import {memo} from 'react';\nimport {FlexCenter} from '@/utils/helper';\nimport {goBack, styled, useTheme} from '@true/core';\nimport {IC_OUTLINED_LEFT} from '@true/asset';\nimport {UIButton, UIText, UITextStyle} from '@true/ui';\nimport {useAnimatedSafeAreaInsets} from 'react-native-safe-area-context';\nimport Animated, {\n  interpolateColor,\n  SharedValue,\n  useAnimatedProps,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\ninterface HeaderCreatePostProps {\n  active: SharedValue<boolean>;\n  onPress: () => void;\n  loading: boolean;\n  id?: number;\n  onGoBack?: () => void;\n  title: string;\n}\n\nexport const HeaderCreatePost = memo(function (props: HeaderCreatePostProps) {\n  const {aTop} = useAnimatedSafeAreaInsets();\n  const animatedPaddingTop = useAnimatedStyle(() => ({\n    paddingTop: aTop.value,\n  }));\n  const theme = useTheme();\n  const {title, active, id, onPress, loading, onGoBack} = props;\n\n  const animatedBtnStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: interpolateColor(\n        active.value ? 1 : 0,\n        [0, 1],\n        [theme.neutral3, theme.primaryColor],\n      ),\n      width: '100%',\n    };\n  }, [theme]);\n\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      pointerEvents: active.value ? 'auto' : 'none',\n    };\n  });\n\n  // useAutoToastError(createError);\n  return (\n    <HeaderWrapper style={animatedPaddingTop}>\n      <FlexCenter gap={8}>\n        <UIButton\n          source={IC_OUTLINED_LEFT}\n          onPress={onGoBack ? onGoBack : goBack}\n        />\n        <UIText.HeaderLarge>{title}</UIText.HeaderLarge>\n      </FlexCenter>\n      <Animated.View animatedProps={animatedProps as any}>\n        <SCreateBtn\n          title={id ? 'Update' : 'Create'}\n          onPress={onPress}\n          style={animatedBtnStyle}\n        />\n      </Animated.View>\n    </HeaderWrapper>\n  );\n});\nconst HeaderWrapper = styled(Animated.View)`\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  border-bottom-color: ${p => p.theme.neutral4};\n  border-bottom-width: 1px;\n  padding: 6px 16px;\n  background-color: white;\n`;\n\nconst SCreateBtn = styled(UIButton).attrs(p => ({\n  textStyle: {\n    ...UITextStyle.body_medium_500,\n    color: '#fff',\n  },\n}))`\n  width: 94px;\n  height: 32px;\n  border-radius: 8px;\n  align-items: center;\n  justify-content: center;\n  padding: 4px 16px;\n  background-color: ${p => p.theme.primaryColor};\n`;\n"],"names":["_templateObject","_templateObject2","_ui","require","_react","_core","_reactNativeReanimated","obj","nodeInterop","__esModule","default","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","_AnimatedBottomSpace","_type","_HeaderCreatePost","_type2","_jsxRuntime","WeakMap","cacheBabelInterop","cacheNodeInterop","_worklet_690685769123_init_data","code","SContainer","exports","memo","params","useSharedValue","initCreateChannel","typeChannelOptions","label","value","ETypeChannel","COMPANY","TEAM","onChangeValue","useCallback","anonymous","runOnUI","_key","_value","assign","_defineProperty2","__closure","__initData","__workletHash","jsx","FullScreenWrapper","children","jsxs","MyKeyboardAvoidingView","HeaderCreatePost","loading","onPress","console","log","isActive","type","ETypeUpdate","CORE_VALUE","SWrapperInput","UIInput","Text","title","keyName","placeholder","required","Selector","options","UserPicker","multiple","AnimatedBottomSpace","styled","Animated","View","_taggedTemplateLiteralLoose2","_helper","_asset","_reactNativeSafeAreaContext","_worklet_9978501313055_init_data","_worklet_16470896921808_init_data","_worklet_14091630795489_init_data","HeaderWrapper","props","aTop","useAnimatedSafeAreaInsets","animatedPaddingTop","useAnimatedStyle","paddingTop","theme","useTheme","active","id","onGoBack","animatedBtnStyle","backgroundColor","interpolateColor","neutral3","primaryColor","width","animatedProps","useAnimatedProps","pointerEvents","style","FlexCenter","gap","UIButton","source","IC_OUTLINED_LEFT","goBack","UIText","HeaderLarge","SCreateBtn","p","neutral4","attrs","textStyle","UITextStyle","body_medium_500","color"],"sourceRoot":""}